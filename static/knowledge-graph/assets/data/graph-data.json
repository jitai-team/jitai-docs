{
  "nodes": [
    {
      "id": "核心组件",
      "label": "核心组件"
    },
    {
      "id": "JitAi运维工具",
      "label": "JitAi运维工具"
    },
    {
      "id": "元素分层",
      "label": "元素分层"
    },
    {
      "id": "AI助理",
      "label": "AI助理"
    },
    {
      "id": "JitORM",
      "label": "JitORM"
    },
    {
      "id": "JitAi",
      "label": "JitAi"
    },
    {
      "id": "设计哲学",
      "label": "设计哲学"
    },
    {
      "id": "学习路径",
      "label": "学习路径"
    },
    {
      "id": "JitAi应用运行平台",
      "label": "JitAi应用运行平台"
    },
    {
      "id": "JitAi开发框架",
      "label": "JitAi开发框架"
    },
    {
      "id": "矩阵型元架构",
      "label": "矩阵型元架构"
    },
    {
      "id": "JAAP协议",
      "label": "JAAP协议"
    },
    {
      "id": "JitAi技术体系",
            "label": "JitAi技术体系"
    },
    {
      "id": "JitAi开发工具",
      "label": "JitAi开发工具"
    },
    {
      "id": "性能优化指南",
      "label": "性能优化指南"
    },
    {
      "id": "本地开发与调试",
      "label": "本地开发与调试"
    },
    {
      "id": "应用案例",
      "label": "应用案例"
    },
    {
      "id": "元素开发最佳实践",
      "label": "元素开发最佳实践"
    },
    {
      "id": "Node节点对象",
      "label": "Node节点对象"
    },
    {
      "id": "ElementAttrDict元素属性字典",
      "label": "ElementAttrDict元素属性字典"
    },
    {
      "id": "Element元素对象",
      "label": "Element元素对象"
    },
    {
      "id": "Environ运行环境",
      "label": "Environ运行环境"
    },
    {
      "id": "AppResource资源管理器",
      "label": "AppResource资源管理器"
    },
    {
      "id": "AppCode源码管理器",
      "label": "AppCode源码管理器"
    },
    {
      "id": "后端App对象",
      "label": "后端App对象"
    },
    {
      "id": "前端元素定义",
      "label": "前端元素定义"
    },
    {
      "id": "前端App对象",
      "label": "前端App对象"
    },
    {
      "id": "应用运行平台后端",
      "label": "应用运行平台后端"
    },
    {
      "id": "应用运行平台前端",
      "label": "应用运行平台前端"
    },
    {
      "id": "数据对象模型",
      "label": "数据对象模型"
    },
    {
      "id": "扩展表模型",
      "label": "扩展表模型"
    },
    {
      "id": "聚合表模型",
      "label": "聚合表模型"
    },
    {
      "id": "普通数据模型",
      "label": "普通数据模型"
    },
    {
      "id": "关联数据类型",
      "label": "关联数据类型"
    },
    {
      "id": "数据容器类型",
      "label": "数据容器类型"
    },
    {
      "id": "特殊字段类型",
      "label": "特殊字段类型"
    },
    {
      "id": "组织架构类型",
      "label": "组织架构类型"
    },
    {
      "id": "附件类型",
      "label": "附件类型"
    },
    {
      "id": "选择器类型",
      "label": "选择器类型"
    },
    {
      "id": "基础字段类型",
      "label": "基础字段类型"
    },
    {
      "id": "达梦数据库",
      "label": "达梦数据库"
    },
    {
      "id": "SQL Server数据库",
      "label": "SQL Server数据库"
    },
    {
      "id": "Oracle数据库",
      "label": "Oracle数据库"
    },
    {
      "id": "PostgreSQL数据库",
      "label": "PostgreSQL数据库"
    },
    {
      "id": "MySQL数据库",
      "label": "MySQL数据库"
    },
    {
      "id": "SQLite数据库",
      "label": "SQLite数据库"
    },
    {
      "id": "TQL查询语言",
      "label": "TQL查询语言"
    },
    {
      "id": "Q表达式",
      "label": "Q表达式"
    },
    {
      "id": "JitORM数据模型系统",
      "label": "JitORM数据模型系统"
    },
    {
      "id": "JitORM数据类型系统",
      "label": "JitORM数据类型系统"
    },
    {
      "id": "JitORM数据库支持",
      "label": "JitORM数据库支持"
    },
    {
      "id": "开发模式",
      "label": "开发模式"
    },
    {
      "id": "JitCommons",
      "label": "JitCommons"
    },
    {
      "id": "JitI18N",
      "label": "JitI18N"
    },
    {
      "id": "JitPay",
      "label": "JitPay"
    },
    {
      "id": "JitMessage",
      "label": "JitMessage"
    },
    {
      "id": "JitStorage",
      "label": "JitStorage"
    },
    {
      "id": "JitTask",
      "label": "JitTask"
    },
    {
      "id": "JitWorkflow",
      "label": "JitWorkflow"
    },
    {
      "id": "JitService",
      "label": "JitService"
    },
    {
      "id": "JitWeb",
      "label": "JitWeb"
    },
    {
      "id": "JitAuth",
      "label": "JitAuth"
    },
    {
      "id": "AIAgent",
      "label": "AIAgent"
    },
    {
      "id": "AI知识库",
      "label": "AI知识库"
    },
    {
      "id": "AI大模型",
      "label": "AI大模型"
    },
    {
      "id": "运行时机制",
      "label": "运行时机制"
    },
    {
      "id": "元素规范",
      "label": "元素规范"
    },
    {
      "id": "应用规范",
      "label": "应用规范"
    },
    {
      "id": "企业级AI应用特征",
      "label": "企业级AI应用特征"
    },
    {
      "id": "AI应用开发范式",
      "label": "AI应用开发范式"
    },
    {
      "id": "协议机制",
      "label": "协议机制"
    },
    {
      "id": "理论背景",
      "label": "理论背景"
    }
  ],
  "edges": [
    {
      "from": "核心组件",
      "to": "JitAi运维工具",
      "label": "包含"
    },
    {
      "from": "核心组件",
      "to": "JitAi应用运行平台",
      "label": "包含"
    },
    {
      "from": "核心组件",
      "to": "JitAi开发框架",
      "label": "包含"
    },
    {
      "from": "核心组件",
      "to": "JitAi开发工具",
      "label": "包含"
    },
    {
      "from": "JitAi技术体系",
      "to": "核心组件",
      "label": "包含"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "JitAi运维工具",
      "label": "运行"
    },
    {
      "from": "JitAi运维工具",
      "to": "JAAP协议",
      "label": "遵循"
    },
    {
      "from": "元素开发最佳实践",
      "to": "元素分层",
      "label": "应用"
    },
    {
      "from": "JitAi开发框架",
      "to": "元素分层",
      "label": "遵循"
    },
    {
      "from": "元素规范",
      "to": "元素分层",
      "label": "包含"
    },
    {
      "from": "JitAi",
      "to": "AI助理",
      "label": "包含"
    },
    {
      "from": "AI助理",
      "to": "AIAgent",
      "label": "编排"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitORM",
      "label": "包含"
    },
    {
      "from": "JitORM",
      "to": "TQL查询语言",
      "label": "包含"
    },
    {
      "from": "JitORM",
      "to": "Q表达式",
      "label": "包含"
    },
    {
      "from": "JitORM",
      "to": "JitORM数据模型系统",
      "label": "包含"
    },
    {
      "from": "JitORM",
      "to": "JitORM数据类型系统",
      "label": "包含"
    },
    {
      "from": "JitORM",
      "to": "JitORM数据库支持",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitAi",
      "label": "包含"
    },
    {
      "from": "JitAi",
      "to": "AIAgent",
      "label": "包含"
    },
    {
      "from": "JitAi",
      "to": "AI知识库",
      "label": "包含"
    },
    {
      "from": "JitAi",
      "to": "AI大模型",
      "label": "包含"
    },
    {
      "from": "理论背景",
      "to": "设计哲学",
      "label": "包含"
    },
    {
      "from": "学习路径",
      "to": "JitAi技术体系",
      "label": "覆盖"
    },
    {
      "from": "学习路径",
      "to": "性能优化指南",
      "label": "包含"
    },
    {
      "from": "学习路径",
      "to": "本地开发与调试",
      "label": "包含"
    },
    {
      "from": "学习路径",
      "to": "元素开发最佳实践",
      "label": "包含"
    },
    {
      "from": "学习路径",
      "to": "应用案例",
      "label": "包含"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "JAAP协议",
      "label": "解释"
    },
    {
      "from": "本地开发与调试",
      "to": "JitAi应用运行平台",
      "label": "基于"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "Environ运行环境",
      "label": "管理"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "Node节点对象",
      "label": "管理"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "JitAi开发框架",
      "label": "运行"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "JitAi开发工具",
      "label": "运行"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "应用运行平台后端",
      "label": "包含"
    },
    {
      "from": "JitAi应用运行平台",
      "to": "应用运行平台前端",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitAuth",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitWeb",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitService",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitWorkflow",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitTask",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitStorage",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitMessage",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitPay",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitI18N",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JitCommons",
      "label": "包含"
    },
    {
      "from": "JitAi开发框架",
      "to": "JAAP协议",
      "label": "遵循"
    },
    {
      "from": "JAAP协议",
      "to": "矩阵型元架构",
      "label": "支持"
    },
    {
      "from": "JitAi开发工具",
      "to": "JAAP协议",
      "label": "遵循"
    },
    {
      "from": "JAAP协议",
      "to": "元素规范",
      "label": "包含"
    },
    {
      "from": "JAAP协议",
      "to": "应用规范",
      "label": "包含"
    },
    {
      "from": "协议机制",
      "to": "JAAP协议",
            "label": "包含"
    },
    {
      "from": "JitAi技术体系",
      "to": "协议机制",
      "label": "包含"
    },
    {
      "from": "JitAi技术体系",
      "to": "理论背景",
      "label": "包含"
    },
    {
      "from": "JitAi开发工具",
      "to": "开发模式",
      "label": "支持"
    },
    {
      "from": "运行时机制",
      "to": "性能优化指南",
      "label": "指导"
    },
    {
      "from": "开发模式",
      "to": "元素开发最佳实践",
      "label": "指导"
    },
    {
      "from": "ElementAttrDict元素属性字典",
      "to": "Element元素对象",
      "label": "继承自"
    },
    {
      "from": "应用运行平台后端",
      "to": "ElementAttrDict元素属性字典",
      "label": "包含"
    },
    {
      "from": "后端App对象",
      "to": "Element元素对象",
      "label": "管理"
    },
    {
      "from": "Environ运行环境",
      "to": "后端App对象",
      "label": "管理"
    },
    {
      "from": "Environ运行环境",
      "to": "AppCode源码管理器",
      "label": "管理"
    },
    {
      "from": "Environ运行环境",
      "to": "AppResource资源管理器",
      "label": "管理"
    },
    {
      "from": "应用运行平台后端",
      "to": "Environ运行环境",
      "label": "包含"
    },
    {
      "from": "前端App对象",
      "to": "前端元素定义",
      "label": "管理"
    },
    {
      "from": "应用运行平台前端",
      "to": "前端App对象",
      "label": "包含"
    },
    {
      "from": "JitORM数据模型系统",
      "to": "数据对象模型",
      "label": "包含"
    },
    {
      "from": "扩展表模型",
      "to": "普通数据模型",
      "label": "技术依赖"
    },
    {
      "from": "JitORM数据模型系统",
      "to": "扩展表模型",
      "label": "包含"
    },
    {
      "from": "聚合表模型",
      "to": "普通数据模型",
      "label": "关联"
    },
    {
      "from": "JitORM数据模型系统",
      "to": "聚合表模型",
      "label": "包含"
    },
    {
      "from": "普通数据模型",
      "to": "JitORM数据类型系统",
      "label": "技术依赖"
    },
    {
      "from": "JitORM数据模型系统",
      "to": "普通数据模型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "关联数据类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "数据容器类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "特殊字段类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "组织架构类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "附件类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "选择器类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据类型系统",
      "to": "基础字段类型",
      "label": "包含"
    },
    {
      "from": "JitORM数据库支持",
      "to": "达梦数据库",
      "label": "包含"
    },
    {
      "from": "JitORM数据库支持",
      "to": "SQL Server数据库",
      "label": "包含"
    },
    {
      "from": "JitORM数据库支持",
      "to": "Oracle数据库",
      "label": "包含"
    },
    {
      "from": "JitORM数据库支持",
      "to": "PostgreSQL数据库",
      "label": "包含"
    },
    {
      "from": "JitORM数据库支持",
      "to": "MySQL数据库",
      "label": "包含"
    },
    {
      "from": "JitORM数据库支持",
      "to": "SQLite数据库",
      "label": "包含"
    },
    {
      "from": "TQL查询语言",
      "to": "Q表达式",
      "label": "技术依赖"
    },
    {
      "from": "JitWorkflow",
      "to": "JitAuth",
      "label": "功能依赖"
    },
    {
      "from": "JitWeb",
      "to": "JitAuth",
      "label": "功能依赖"
    },
    {
      "from": "AIAgent",
      "to": "AI知识库",
      "label": "使用"
    },
    {
      "from": "AIAgent",
      "to": "AI大模型",
      "label": "技术依赖"
    },
    {
      "from": "AI知识库",
      "to": "AI大模型",
      "label": "集成"
    },
    {
      "from": "协议机制",
      "to": "运行时机制",
      "label": "包含"
    },
    {
      "from": "理论背景",
      "to": "企业级AI应用特征",
      "label": "包含"
    },
    {
      "from": "理论背景",
      "to": "AI应用开发范式",
      "label": "包含"
    }
  ],
  "nodeDetails": {
    "核心组件": {
      "description": "JitAi技术体系的四大核心产品组件",
      "details": [
        "包含开发工具、开发框架、运维平台、应用运行平台",
        "提供完整的AI应用开发和运行生态",
        "各组件相互协作，形成统一的技术栈"
      ]
    },
    "JitAi运维工具": {
      "description": "符合JAAP规范的一站式自动化运维管理平台",
      "details": [
        "由应用运行平台解释运行",
        "支持应用的全生命周期管理：创建、发布、部署、运维",
        "提供自动化的DevOps工具，让AI应用的全流程简单化、轻量化",
        "大幅降低运维成本和复杂度"
      ]
    },
    "元素分层": {
      "description": "实现高度可扩展性和复用性的分层架构设计",
      "details": [
        "Meta元素：type字段为空，直接由平台内核加载，作为元素族类的根节点",
        "Type元素：type字段指向Meta元素或其他Type元素，封装技术领域的完整基础设施",
        "Instance元素：type字段必须指向Type元素，仅包含业务相关配置和轻量逻辑",
        "元素加载流程：平台内核→Meta元素→Type元素→Instance元素"
      ]
    },
    "AI助理": {
      "description": "AI应用与用户交互的统一界面",
      "details": [
        "支持可视化编排：通过可视化界面实现路由决策、AI Agent编排、人机交互设计",
        "实现多Agent协同：助理中可编排多个Agent，实现Multi Agent协作",
        "提供智能路由：根据用户意图自动选择合适的Agent处理任务",
        "支持复杂业务逻辑：函数调用、条件分支、多任务执行",
        "一键集成：以不同形态的入口集成到业务系统的各个角落"
      ]
    },
    "JitORM": {
      "description": "对象关系映射框架",
      "details": [
        "以数据库元素、数据类型元素、模型元素为核心组成",
        "包含5大核心模块：数据库支持、数据类型系统、数据模型系统、Q表达式、TQL查询语言",
        "支持SQLite、MySQL、PostgreSQL、Oracle、SQL Server、达梦等多种数据库",
        "提供普通数据模型、聚合表模型、扩展表模型、数据对象模型四种模型",
        "自动管理数据库连接，内置业务层常用的数据操作接口",
        "提供Q表达式、TQL等辅助数据查询工具"
      ]
    },
    "JitAi": {
      "description": "JitAi开发框架中的AI能力组件集合",
      "details": [
        "包含AI大模型、AI知识库、AIAgent、AI助理四个核心AI组件",
        "遵循JAAP规范设计，支持统一的AI组件调用标准",
        "为JitAi应用提供完整的AI能力支撑",
        "提供企业级AI应用开发的基础设施",
        "作为开发框架的子模块，专门负责AI功能的封装和实现"
      ]
    },
    "设计哲学": {
      "description": "架构设计是对复杂性的管理艺术",
      "details": [
        "基于三个基本原理：分治、抽象、组合",
        "分治原理：将复杂问题分解为独立的子问题",
        "抽象原理：隐藏细节，突出关键特征",
        "组合原理：通过复用对接基础抽象单元构建复杂功能"
      ]
    },
    "学习路径": {
      "description": "从初学者到专家的渐进式能力提升路径",
      "details": [
        "包含应用案例、元素开发最佳实践、本地开发调试、性能优化指南",
        "由简单到复杂的递进式学习结构",
        "帮助开发者系统性掌握JitAi技术体系"
      ]
    },
    "JitAi应用运行平台": {
      "description": "微内核的JAAP应用解释与运行平台",
      "details": [
        "JAAP应用运行容器：类比JVM和Docker，解释JAAP配置，跨平台运行JitAi应用",
        "支持跨平台运行：Windows、MacOS、Linux操作系统",
        "提供系统级API，开发者可搭配System API和开发框架开发应用",
        "支持前后端全栈元素的开发、调试、自动构建、部署、运行、更新",
        "实现环境虚拟化：仅受硬件资源限制的运行环境虚拟化",
        "提供全面的应用生命周期管理：开发、调试、构建、部署、运行、更新",
        "内置在安装包中，随JitNode节点的启动而加载"
      ]
    },
    "JitAi开发框架": {
      "description": "基于矩阵型元架构的高度可复用、可扩展模块化开发框架",
      "details": [
        "提供Ai、Auth、I18N、Message、ORM、Pay、Service、Storage、Task、Web、Workflow等11个全栈业务开发组件",
        "所有组件均遵循JAAP规范，在开发工具中开箱即用",
        "将普适、通用的套路和组件模式封装为不同的元素族类",
        "支持开发者扩展定义自己的元素族类，也可通过继承改写官方元素族类",
        "实现高集成度且高开放度的编排式编程框架",
        "让业务层高度可编排，复杂度和工程量降低90%"
      ]
    },
    "矩阵型元架构": {
      "description": "开创性的通用统一的架构模式",
      "details": [
        "横向元素族类与纵向元素分层的矩阵组织方式",
        "由元素族类、元素分层、应用继承机制共同构成",
        "实现通用统一、高度复用、自由扩展的特性",
        "提供无与伦比的复用和扩展能力",
        "极致简化开发框架、工具、生态的复用和扩展"
      ]
    },
    "JAAP协议": {
      "description": "Jit Ai Application Protocol，解释型应用架构协议",
      "details": [
        "由应用规范和元素规范两部分组成",
        "定义了应用系统的构建标准和模块化架构",
        "从结构定义和过程驱动层面实现应用开发的复杂性抽象",
        "应用运行平台对其进行解释执行，实现跨平台运行",
        "让应用系统成为可被AI动态感知、动态调用、动态编排的解释型系统",
        "把传统应用生态带入AI驱动和AI编排时代"
      ]
    },
    "JitAi技术体系": {
      "description": "JitAi = Jit + AI，Just In Time即时、快速构建，for AI application",
      "details": [
        "为AI而生的下一代应用开发技术体系",
        "旨在加快企业级AI应用落地，开启AI应用规模化时代",
        "通过解释型系统、矩阵型元架构、图形化编排开发、自动化运维的有机结合建立完整技术体系"
            ]
    },
    "JitAi开发工具": {
      "description": "符合JAAP规范的双模（可视化、全代码）统一的企业级AI应用开发工具",
      "details": [
        "由应用运行平台解释运行，提供编排式编程体验",
        "IDEApp是JitAi打造的编程与编排双模式的企业级应用开发工具",
        "支持可视化编排和编程的开发工具和开发方式，大幅提升开发效率",
        "自适应开发框架的扩展变更以及开发者自定义的元素族类",
        "使开发速度提升10倍，让开发者从容应对AI应用的复杂多变"
      ]
    },
    "性能优化指南": {
      "description": "多层次的性能优化策略",
      "details": [
        "懒加载策略：应用级、元素级、资源级的多层次懒加载",
        "多层缓存机制：进程级缓存、请求线程级缓存、持久化缓存",
        "合理配置加载时机：前端加载时机和后端加载时机的优化配置",
        "缓存级别配置：进程级别和线程级别的合理选择",
        "访问权限控制：private、protected、public修饰符的合理使用"
      ]
    },
    "本地开发与调试": {
      "description": "支持多种主流IDE进行本地开发调试",
      "details": [
        "Visual Studio Code：轻量级编辑器，丰富的Python扩展生态",
        "PyCharm：专业Python IDE，强大的调试和重构功能",
        "配置调试环境：创建调试配置文件，配置系统解释器",
        "启动调试：使用JitNode内置的Python环境进行调试"
      ]
    },
    "应用案例": {
      "description": "从简单到复杂的递进式实践体系",
      "details": [
        "快速上手案例：5分钟开发一个AI应用（智能客服）",
        "进阶案例：集成智能客服到钉钉机器人",
        "复杂案例：AI驱动的UI自动化交互",
        "企业级案例：开发一个CRM应用"
      ]
    },
    "元素开发最佳实践": {
      "description": "开发工作流：需求分析→元素设计→创建元素目录→实现元素逻辑",
      "details": [
        "遵循单一职责：每个元素专注于特定功能领域",
        "合理使用继承：充分利用Type元素的模板能力",
        "注重性能优化：合理配置缓存和加载时机",
        "完善错误处理：实现健壮的异常处理机制",
        "保持文档同步：及时更新元素描述和接口文档"
      ]
    },
    "Node节点对象": {
      "description": "Node对象对应着当前运行的Jit节点",
      "details": [
        "包含nodeId、startId、nodeType、port、bindIp等节点属性",
        "支持节点配置管理和版本信息",
        "所有属性均为只读属性"
      ]
    },
    "ElementAttrDict元素属性字典": {
      "description": "继承自dict，拥有Element对象的所有属性",
      "details": [
        "支持以字典方式访问属性，不会触发元素的加载",
        "用.访问属性时，会触发元素的加载",
        "优化元素属性访问的性能和灵活性"
      ]
    },
    "Element元素对象": {
      "description": "元素对象，通过app.getElement(fullName)获取",
      "details": [
        "包含envId、appId、version、define、fullName等元素属性",
        "支持元素文件读取和管理",
        "实现了对执行对象的透明代理，可直接调用执行对象的方法和属性"
      ]
    },
    "Environ运行环境": {
      "description": "运行环境对象，用于管理和控制应用的运行环境",
      "details": [
        "在同一个运行环境中，每个AppId只能运行一个版本",
        "包含envId、orgId、title、rootPath等环境属性",
        "支持应用获取、路径管理、部署规则等功能"
      ]
    },
    "AppResource资源管理器": {
      "description": "应用资源管理器，用于管理和操作应用的已打包资源文件",
      "details": [
        "用于运行时环境，负责从内存中读取应用的打包资源",
        "包括元素资源、公共资源等",
        "支持资源存在性检查、资源读取等操作"
      ]
    },
    "AppCode源码管理器": {
      "description": "应用源码管理器，用于管理和操作应用的源代码文件",
      "details": [
        "仅在应用具有本地源码时可用（即存在app.json文件）",
        "通常用于开发调试场景",
        "支持文件存在性检查、目录判断、文件读写等操作"
      ]
    },
    "后端App对象": {
      "description": "后端应用管理的核心对象，可直接使用app关键字调用",
      "details": [
        "包含appId、appKey、version、title等丰富的应用属性",
        "包含env、node、code、resource等关联对象",
        "支持初始化数据、环境变量、依赖管理等功能"
      ]
    },
    "前端元素定义": {
      "description": "ElementDefine对象，描述元素的定义信息",
      "details": [
        "内容与元素e.json内容一致",
        "通过App对象的相关方法获取元素定义",
        "支持按类型、目录、实例等方式获取元素定义"
      ]
    },
    "前端App对象": {
      "description": "前端平台API的核心，提供应用级别的属性和方法",
      "details": [
        "可通过this.app在元素内部访问，或getRuntimeApp全局访问",
        "包含appId、name、title等应用基本属性",
        "提供元素获取和操作的相关方法"
      ]
    },
    "应用运行平台后端": {
      "description": "后端平台API的核心模块",
      "details": [
        "包含应用管理、运行环境管理、元素管理和Jit节点管理",
        "提供完整的应用生命周期管理能力",
        "支持源码管理和资源管理功能"
      ]
    },
    "应用运行平台前端": {
      "description": "前端平台API的核心模块",
      "details": [
        "提供元素内部访问和全局访问机制",
        "支持元素定义管理和应用对象操作",
        "为前端元素提供统一的平台服务接口"
      ]
    },
    "数据对象模型": {
      "description": "当前仅支持全代码方式使用",
      "details": [
        "可类比为DTO（Data Transfer Object）",
        "完全由开发者按需定义，不与数据库关联",
        "在业务逻辑流转中使用，适用于数据传输和中间处理"
      ]
    },
    "扩展表模型": {
      "description": "以一个普通数据模型作为基础模型",
      "details": [
        "通过字段关联规则链式地关联（LEFT JOIN）其他数据模型",
        "对被关联模型的字段进行聚合统计（SUM、COUNT、MAX等）",
        "适用于复杂业务查询和数据关联分析"
      ]
    },
    "聚合表模型": {
      "description": "用于多数据模型关联的复杂数据分析场景",
      "details": [
        "支持分组汇总（GROUP BY）、追加合并（UNION）、横向连接（JOIN）",
        "三种模式可以嵌套组合使用",
        "适用于数据统计、报表生成等场景"
      ]
    },
    "普通数据模型": {
      "description": "最常见的数据模型，每个实例对应指定数据库中的一张表",
      "details": [
        "对模型字段的变更会自动同步到数据库中",
        "开发人员无需手动维护数据库表",
        "支持所有类型的数据字段定义"
      ]
    },
    "关联数据类型": {
      "description": "关联数据、筛选条件等数据关联类型",
      "details": [
        "实现模型间的数据关联和引用",
        "支持外键关系和复杂查询条件",
        "适用于关联查询、数据联动等场景"
      ]
    },
    "数据容器类型": {
      "description": "字典、列表、映射、单行数据、多行数据等容器类型",
      "details": [
        "不可用于模型字段，主要用于业务逻辑处理",
        "支持复杂数据结构的存储和操作",
        "适用于数据转换、中间结果存储等场景"
      ]
    },
    "特殊字段类型": {
      "description": "地址、身份证号、车牌号、电话号码等业务特定类型",
      "details": [
        "定位、超链接、子表等复杂功能类型",
        "内置业务验证规则和专用显示组件",
        "适用于特定业务领域的数据处理"
      ]
    },
    "组织架构类型": {
      "description": "部门单选/多选、成员单选/多选等组织架构相关类型",
      "details": [
        "与企业组织架构数据紧密集成",
        "适用于人员管理、权限控制、工作流等场景"
      ]
    },
    "附件类型": {
      "description": "文件、图片、手写签名等附件类型",
      "details": [
        "支持文件上传、存储和下载功能",
        "适用于文档管理、图片展示、电子签名等场景"
      ]
    },
    "选择器类型": {
      "description": "选项组单选/多选、下拉选择、检查框等选择类型",
      "details": [
        "日期时间选择器",
        "支持多种选择交互方式",
        "适用于数据列表、状态选择等场景"
      ]
    },
    "基础字段类型": {
      "description": "单行文本、多行文本、数字、金额、百分比等基础数据类型",
      "details": [
        "包含富文本、编号、流水号等特殊文本类型",
        "适用于大部分常规业务数据场景",
        "提供标准的输入验证和显示功能"
      ]
    },
    "达梦数据库": {
      "description": "国产自主可控关系型数据库",
      "details": [
        "Type元素fullName：databases.DmdbType",
        "配置文件包含schema、host、port、user、password等连接信息"
      ]
    },
    "SQL Server数据库": {
      "description": "微软企业级关系型数据库",
      "details": [
        "Type元素fullName：databases.SqlServerType",
        "配置文件包含database、host、port、user、password等连接信息"
      ]
    },
    "Oracle数据库": {
      "description": "企业级商业关系型数据库",
      "details": [
        "Type元素fullName：databases.OracleType",
        "配置文件包含service_name、host、port、user、password等连接信息"
      ]
    },
    "PostgreSQL数据库": {
      "description": "高级开源关系型数据库",
      "details": [
        "Type元素fullName：databases.PgSqlType",
        "配置文件包含dbname、host、port、user、password等连接信息"
      ]
    },
    "MySQL数据库": {
      "description": "开源关系型数据库",
      "details": [
        "数据库类型标识：mysql",
        "Type元素fullName：databases.MySQLType",
        "配置文件包含host、port、user、password、database等连接信息"
      ]
    },
    "SQLite数据库": {
      "description": "轻量级关系型数据库",
      "details": [
        "数据库类型标识：sqlite",
        "Type元素fullName：databases.SqliteType",
        "配置文件包含database路径设置"
      ]
    },
    "TQL查询语言": {
      "description": "Table Query Language，构建面向数据模型的数据查询语法",
      "details": [
        "查询条件使用Q表达式构建",
        "支持基本查询、关联查询、排序分页、聚合查询、联合查询",
        "支持数据操作：插入（Insert）、更新（Update）、删除（Delete）"
      ]
    },
    "Q表达式": {
      "description": "Query Expression，构建面向数据模型的查询条件语法",
      "details": [
        "以简洁、直观的字符串方式表达复杂的查询逻辑",
        "支持比较操作符（=、!=、>、>=、<、<=）",
        "支持包含操作符（in、nin）、模糊匹配（like、startswith、endswith）、空值判断（isnull）等"
      ]
    },
    "JitORM数据模型系统": {
      "description": "业务实体对象的定义和管理系统",
      "details": [
        "内置业务层常用的数据操作接口",
        "基于丰富的数据类型，提供面向对象的数据模型定义方式",
        "支持可视化界面编辑和全代码方式两种开发模式",
        "支持4种数据模型：普通数据模型、聚合表模型、扩展表模型、数据对象模型"
      ]
    },
    "JitORM数据类型系统": {
      "description": "对编程语言原生数据类型的封装，提供额外功能和特性",
      "details": [
        "高频用于定义数据模型字段的类型",
        "每种数据类型都封装了对应的业务功能和UI渲染逻辑",
        "支持公共init参数：基础参数、数据库相关参数、权限控制参数、计算公式参数",
        "提供7大类数据类型：基础字段、选择器、附件、组织架构、特殊字段、数据容器、关联数据"
      ]
    },
    "JitORM数据库支持": {
      "description": "封装数据库对接的技术实现，自动管理数据库连接",
      "details": [
        "支持一个应用中创建多个数据库元素实例，对接多个数据库",
        "提供统一的数据库访问接口和连接管理功能",
        "每个数据库实例元素由e.json定义文件和配置文件组成",
        "支持6种数据库：SQLite、MySQL、PostgreSQL、Oracle、SQL Server、达梦"
      ]
    },
    "开发模式": {
      "description": "JitAi提供双模统一的开发体验",
      "details": [
        "JitAi开发工具模式：可视化配置，即改即生效，零配置部署",
        "本地全代码开发模式：完全控制实现细节，适合复杂定制需求",
        "双模统一：编程与编排双模式的无缝切换",
        "编排的本质是对结构对象的配置和组合",
        "编程依赖编排：编排产生对象，在函数中使用对象实现过程序列"
      ]
    },
    "JitCommons": {
      "description": "通用工具组件",
      "details": [
        "提供常用的工具和库函数",
        "通用工具层，包含各种常用的工具类和库函数"
      ]
    },
    "JitI18N": {
      "description": "国际化组件",
      "details": [
        "支持多语言应用开发",
        "基础设施层的国际化支持，实现应用的多语言支持"
      ]
    },
    "JitPay": {
      "description": "支付组件",
      "details": [
        "提供支付集成能力",
        "集成服务层的支付组件，支持多种支付方式和支付渠道的集成"
      ]
    },
    "JitMessage": {
      "description": "消息通信组件",
      "details": [
        "支持各种消息通信机制",
        "集成服务层的消息组件，支持邮件、短信、即时消息等通信方式"
      ]
    },
    "JitStorage": {
      "description": "存储服务组件",
      "details": [
        "提供文件存储和管理能力",
        "基础设施层的存储服务，支持文件上传、下载、管理等功能"
      ]
    },
    "JitTask": {
      "description": "任务调度组件",
      "details": [
        "支持定时任务和批处理任务的执行模板",
        "任务调度层的核心组件，管理定时任务和批处理任务"
      ]
    },
    "JitWorkflow": {
      "description": "工作流程管理组件",
      "details": [
        "支持业务流程管理",
        "定义审批节点和流转规则",
        "业务流程管理，支持复杂的企业级审批流程"
      ]
    },
    "JitService": {
      "description": "业务逻辑处理组件",
      "details": [
        "封装核心业务规则和流程",
        "提供业务服务接口",
        "业务逻辑层的核心组件，实现业务规则的封装和复用"
      ]
    },
    "JitWeb": {
      "description": "Web应用开发组件",
      "details": [
        "提供页面、组件、门户等UI构建单元",
        "支持组件化布局或代码开发实现特定业务功能",
        "门户：系统访问入口，应用默认提供使用区、开发区、管理区三类门户",
        "页面：功能模块界面，通过组件化布局或代码开发实现特定业务功能",
        "组件：可复用的UI构建单元，提供标准化的界面交互能力"
      ]
    },
    "JitAuth": {
      "description": "身份认证和权限管理组件",
      "details": [
        "基于RBAC（Role-Based Access Control）的权限控制体系",
        "支持多元化身份认证机制配置",
        "提供角色、组织架构、登录方式等权限管理元素"
      ]
    },
    "AIAgent": {
      "description": "AI应用的核心执行引擎",
      "details": [
        "负责工具编排、全链路状态跟踪和任务执行",
        "支持动态组合和调用各种业务工具和服务",
        "维护对话上下文、任务执行状态和数据流转状态",
        "复杂业务逻辑的分解和执行",
        "基于用户角色的工具访问权限管理"
      ]
    },
    "AI知识库": {
      "description": "基于RAG技术的企业知识管理系统",
      "details": [
        "支持多种数据源的智能检索和知识增强",
        "支持文档、数据库、API等多种知识源",
        "实时更新：知识库内容动态同步，保证信息时效性",
        "基于向量数据库的智能语义匹配和检索",
        "应用场景：企业内部文档和制度的智能问答、产品手册和技术文档的自动检索、客户服务知识库的智能匹配、行业知识和最佳实践的智能推荐"
      ]
    },
    "AI大模型": {
      "description": "企业级大模型服务网关，对接各个大模型服务厂商",
      "details": [
        "提供统一的模型调用接口",
        "屏蔽不同大模型厂商的API差异",
        "提供统一的调用标准和错误处理机制",
        "支持业务层按需选择模型与参数",
        "支持负载均衡与故障转移"
      ]
    },
    "运行时机制": {
      "description": "通过微内核架构和解释型执行模式，实现应用的动态加载、热更新和智能路由",
      "details": [
        "请求处理流程：运行环境路由、应用路由、元素路由",
        "应用实例化流程：应用资源自动热部署、应用目录校验、构建状态判断、应用实例化",
        "元素查找流程：运行时容器查询、应用配置查询、继承链追溯",
        "性能优化机制：懒加载策略、多层缓存机制"
      ]
    },
    "元素规范": {
      "description": "采用三层元素架构设计，实现高度的可扩展性和复用性",
      "details": [
        "每个元素遵循统一的目录结构和文件命名规范",
        "元素定义清单e.json、运行时配置 config.json、元素加载器loader.py、生命周期管理lifecycle.py",
        "元素支持完整的生命周期管理机制",
        "支持HTTP协议直接调用元素实例"
      ]
    },
    "应用规范": {
      "description": "定义应用的基本信息和运行参数",
      "details": [
        "标准化的应用目录结构",
        "应用部署路径规则：运行环境目录/组织ID/应用ID/应用版本",
        "应用配置清单app.json",
        "应用继承机制：子应用可继承父应用的元素和配置"
      ]
    },
    "企业级AI应用特征": {
      "description": "深度业务集成和精细化管控",
      "details": [
        "模块自描述能力：功能描述、数据处理能力、任务执行范围、参数规范、调用示例",
        "模块热插拔可替换：动态需求、数据适配、任务匹配、实时加载、无缝替换、组合编排",
        "全栈模块工具化：突破传统后端服务调用的局限，实现前后端统一的工具调用能力"
      ]
    },
    "AI应用开发范式": {
      "description": "AI应用开发范式的本质：AI+人协同完成目标",
      "details": [
        "从人机交互到人智协同的变革",
        "从硬编码驱动到AI决策驱动的转变",
        "AI驱动的全栈工具调用流程",
        "开发者不再仅仅是开发一套操作界面和预设的固定逻辑"
      ]
    },
    "协议机制": {
      "description": "JitAi技术体系的核心协议和运行机制",
      "details": [
        "包含JAAP统一架构语言、矩阵型元架构、运行时机制",
        "定义了应用开发和运行的标准规范",
        "实现了系统的可扩展性和互操作性"
      ]
    },
    "理论背景": {
      "description": "JitAi技术体系的理论基础和设计理念",
      "details": [
        "包含架构设计哲学、AI应用开发新范式、企业级应用特征",
        "为整个技术体系提供理论指导",
        "奠定了JitAi技术架构的根本原则"
      ]
    }
  }
} 