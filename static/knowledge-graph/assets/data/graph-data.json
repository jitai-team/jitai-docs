{
  "entities": [
    {
      "name": "后台任务编辑器",
      "type": "Memory",
      "observations": [
        "定时任务支持：支持指定时间和循环周期的定时任务执行",
        "日期字段任务：基于数据表模型中的日期时间字段，按时间表执行任务"
      ]
    },
    {
      "name": "05-生物医药行业案例",
      "type": "Memory",
      "observations": [
        "模板继承：基于制造业通用模板，继承完整的ERP/MES基础架构和标准业务功能",
        "行业特点分析：合规为先、质量至上的严格要求，技术密集型管理需求，复杂供应链协同",
        "扩展功能模块：在通用基础上扩展质量管理、质量追溯、限制运输、配方管理、制剂代号保密、合作商库存管理、有效期预警、供应商准入评级等",
        "合规管理体系：医药行业特有的全流程合规性控制和质量保证体系"
      ]
    },
    {
      "name": "角色权限编辑器",
      "type": "Memory",
      "observations": [
        "集中权限管理：统一管理应用角色成员和权限配置",
        "多层级权限控制：支持数据模型操作权限、门户页面访问权限、页面内组件展示和操作权限",
        "可视化操作：通过可视化界面实现权限的精细化配置和管理"
      ]
    },
    {
      "name": "02-开发工具",
      "type": "Memory",
      "observations": [
        "基于JAAP规范的企业级AI应用开发工具，支持多场景开发需求",
        "智能体可视化开发：让AI智能体通过可视化搭建快速在应用系统中调测成型落地",
        "jit-builder编译打包：支持代码编译、加密混淆、压缩优化和校验码生成",
        "开发流程支撑：从 meta元素编辑到type元素生成，再到业务应用中instance实例创建的完整可视化开发流程",
        "基于JAAP规范的JitAi可视化开发工具（IDEApp），本身是独立的jit app，包含门户Editor、页面Editor、前端组件Editor、数据模型Editor、数据库Editor等完整编辑器套件",
        "双模统一开发：AI化/可视化编排与代码编程等价无损切换，支持AI助手开发源码和纯人工全代码开发，即时保存编译加载生效，大幅降低开发门槛实现高效低成本",
        "可视化管理：解析应用源代码目录，呈现和管理应用的所有元素及其源码，可视化展示元素间关系，统一的查看、添加、编辑、删除操作模式",
        "可任意扩展：与应用平台、业务应用、编程框架完全隔离，可独立扩展，且可在业务层应用中直接扩展可视化开发工具，无需依赖官方IDEApp"
      ]
    },
    {
      "name": "03-运维工具",
      "type": "Memory",
      "observations": [
        "自动化零成本运维：平台一键安装自动升级，应用自动部署更新，实现部署更新自动化零成本",
        "基于JAAP规范的AdminApp，是应用运行平台内置的自动化运维管理平台，提供自动化DevOps工具和分布式部署能力",
        "全生命周期运维：涵盖应用平台管理、运行环境管理、节点管理、应用管理、开发者组织管理五大功能模块，支持桌面端和服务器端浏览器访问",
        "分布式集群运维：支持组织内集群环境的创建删除、应用配置部署、服务器节点管理、分流权重配置，实现大型多应用集群的统一运维管理和多组织协同"
      ]
    },
    {
      "name": "04-汽车零配件行业案例",
      "type": "Memory",
      "observations": [
        "模板继承：基于制造业通用模板，继承完整的ERP/MES基础架构和标准业务功能",
        "行业特点分析：复杂供应商管理、产品质量追溯制度、多样化生产模式、严格法规合规要求",
        "扩展功能模块：在通用基础上扩展重要订单管理、供应商管理、业务材料规划、质量管理、经营报表、BOM管理等行业专用功能",
        "质量追溯体系：汽车行业特有的全链条质量管控和追溯机制"
      ]
    },
    {
      "name": "页面编辑器",
      "type": "Memory",
      "observations": [
        "可视化构建：直接添加和布局组件，构建页面原型",
        "双模式逻辑配置：基础场景支持可视化配置组件事件交互，复杂需求可切换源码模式全代码开发",
        "全链路控制：从界面设计到业务逻辑的完整开发流程覆盖",
        "内置页面类型：框架内置数据管理页面和数据录入页面type及对应编辑器"
      ]
    },
    {
      "name": "表单编辑器",
      "type": "Memory",
      "observations": [
        "数据模型依赖：基于数据模型元素实现数据录入、编辑、查看功能",
        "交互能力封装：封装事件定义、交互反馈、布局排版、数据校验、字段显隐控制等能力",
        "拖拽式开发：通过拖拽操作完成表单实例开发"
      ]
    },
    {
      "name": "运行时对象",
      "type": "Memory",
      "observations": [
        "提供运行时的对象实例和管理机制",
        "为系统运行提供具体的对象实例和管理能力",
        "直接包含Node节点对象和Environ运行环境"
      ]
    },
    {
      "name": "后端事件编辑器",
      "type": "Memory",
      "observations": [
        "事件触发机制：响应系统数据或程序内部变化，在变化前后触发逻辑执行",
        "模型事件：数据表增删改操作前后触发服务函数执行",
        "审批事件：审批节点变更和状态变更时触发服务函数执行",
        "自定义事件：开发者在服务函数中自主声明和触发，提供灵活的事件调度机制实现模块解耦"
      ]
    },
    {
      "name": "01-AI智能体应用",
      "type": "Memory",
      "observations": [
        "专业智能体矩阵：设计助手、销售助手、采购助手、库存助手、财务助手等覆盖企业各业务环节的专业AI智能体",
        "智能客服系统：集成大模型、知识库、多轮对话的企业级客服解决方案",
        "AI出题阅卷系统：集成大模型、知识库、人机协作的教育场景应用，展现复杂业务流程的AI化改造和人智协同机制",
        "AI能力与业务深度融合：通过可视化编排实现AI智能体在具体业务场景中的快速落地和调优"
      ]
    },
    {
      "name": "02-通用企业管理系统",
      "type": "Memory",
      "observations": [
        "CRM客户关系管理：客户档案、销售机会、合同管理、客户服务的完整客户生命周期管理",
        "OA办公自动化：审批流程、文档管理、会议管理、通知公告等企业内部协同办公功能",
        "BI商业智能：数据分析、报表生成、经营决策支持的企业数据洞察平台",
        "标准化快速实现：基于JitAi技术架构的通用企业应用模板，支持快速部署和个性化配置"
      ]
    },
    {
      "name": "前端元素对象",
      "type": "Memory",
      "observations": [
        "ElementDefine对象，描述元素的定义信息",
        "内容与元素e.json内容一致",
        "通过App对象的相关方法获取元素定义",
        "支持按类型、目录、实例等方式获取元素定义"
      ]
    },
    {
      "name": "06-电子制造行业案例",
      "type": "Memory",
      "observations": [
        "模板继承：基于制造业通用模板，继承完整的ERP/MES基础架构和标准业务功能",
        "行业特点分析：需求多元化、生产过程不连续、复杂生产工艺、复杂生产计划与调度管理",
        "扩展功能模块：在通用基础上扩展工艺工序管理、条码领料一码一档、合作商库存管理、生产计划管理、业务材料规划、材料技术规划等",
        "精益生产管理：电子制造特有的工艺标准化、生产透明化、计划智能化体系"
      ]
    },
    {
      "name": "02-应用侧能力表现",
      "type": "Memory",
      "observations": [
        "生产级标准：安全合规、稳定可控、权限精细化管理，简洁结构保障系统长期健壮性",
        "复杂度分级与人智协作：按函数、代理、助理三级支持不同复杂度的应用开发，AI与人共同协作完成任务，AI智能体快速在企业落地",
        "五大场景高效支撑：AI智能体落地、企业业务系统开发、多应用集群构建、应用模板定制、开发工具构建，通过巨型技术组件和深入业务领域的高阶编程框架实现开发高效成本低",
        "应用复用与定制：支持从通用业务应用app到定制业务应用app的灵活转换，实现应用模版的继承复用和个性化定制"
      ]
    },
    {
      "name": "门户编辑器",
      "type": "Memory",
      "observations": [
        "门户访问入口：门户是一组功能页面的访问入口，提供页面导航框架",
        "内置导航框架：框架层内置通用导航框架，开发者只需配置导航菜单无需自主开发",
        "组成结构：由门户配置、导航菜单、导航页面元素三部分组成",
        "导航页面支持：内置左侧导航页面和顶部导航页面，支持自定义导航页面扩展"
      ]
    },
    {
      "name": "01-矩阵型元架构",
      "type": "Memory",
      "observations": [
        "简洁健壮体系：通用可扩展的系统模型，应用层易改动扩展保障中期适应性，底层框架可扩展性保障长期健壮性",
        "矩阵交叉复用：横纵交织形成强大的复用和扩展能力，通过巨型模块封装方法跨应用场景支撑多种开发需求",
        "横向元素族类：按技术领域或业务领域划分（门户、前端功能页、组件、数据模型、数据库等），每个族类包含完整的meta-type-instance三层架构",
        "纵向元素分层：Meta-Type-Instance三层，meta族类元素封装技术标准，type元素封装技术实现，instance元素表达业务逻辑",
        "链式元素关系：门户引用页面、页面引用前端组件、前端组件引用数据模型，形成简单清晰的链式依赖关系，易于数据传递和功能扩展"
      ]
    },
    {
      "name": "01-应用运行平台",
      "type": "Memory",
      "observations": [
        "基于JAAP协议的统一解释型应用运行平台（jitNode），企业级应用的集成化运行环境，采用微内核和双容器架构，平台与应用完全分离，支持任意形态、跨语言、分布式、跨平台、跨多端的高度集成自动化",
        "跨平台容器化管理：提供Windows桌面版、Mac桌面版、docker（Linux）服务器版，一键安装即可拥有所有基础设施，物理环境虚拟化隔离",
        "主动式全生命周期管理：自动按需加载最新应用，涵盖编译打包、发布、部署、更新升级的完整自动化流程，支持应用继承和元素多态复用",
        "分布式集群支持：内置分布式集群能力，通过JitAi运维工具实现本地环境和云端集群的统一管理，支持多应用、多组织的协同运行"
      ]
    },
    {
      "name": "JitAi",
      "type": "Memory",
      "observations": [
        "AI能力组件集，包含大模型、知识库、Agent和助理四个核心模块",
        "为企业级AI应用提供完整支撑：为AI和GUI原生设计，简洁灵活高集成的开发框架",
        "AI智能体落地支撑：通过可视化开发和调测工具，让AI智能体快速在企业数字化系统中落地应用"
      ]
    },
    {
      "name": "AI大模型",
      "type": "Memory",
      "observations": [
        "企业级大模型服务网关，对接各个大模型服务厂商",
        "提供统一的模型调用接口",
        "屏蔽不同大模型厂商的API差异",
        "提供统一的调用标准和错误处理机制",
        "支持业务层按需选择模型与参数",
        "支持负载均衡与故障转移"
      ]
    },
    {
      "name": "AI知识库",
      "type": "Memory",
      "observations": [
        "基于RAG技术的企业知识管理系统",
        "支持多种数据源的智能检索和知识增强",
        "支持文档、数据库、API等多种知识源",
        "实时更新：知识库内容动态同步，保证信息时效性",
        "基于向量数据库的智能语义匹配和检索",
        "应用场景：企业内部文档和制度的智能问答、产品手册和技术文档的自动检索、客户服务知识库的智能匹配、行业知识和最佳实践的智能推荐"
      ]
    },
    {
      "name": "AIAgent",
      "type": "Memory",
      "observations": [
        "AI应用的核心执行引擎",
        "负责工具编排、全链路状态跟踪和任务执行",
        "支持动态组合和调用各种业务工具和服务",
        "维护对话上下文、任务执行状态和数据流转状态",
        "复杂业务逻辑的分解和执行",
        "基于用户角色的工具访问权限管理"
      ]
    },
    {
      "name": "AI助理",
      "type": "Memory",
      "observations": [
        "AI应用与用户交互的统一界面",
        "支持可视化编排：通过可视化界面实现路由决策、AI Agent编排、人机交互设计",
        "实现多Agent协同：助理中可编排多个Agent，实现Multi Agent协作",
        "提供智能路由：根据用户意图自动选择合适的Agent处理任务",
        "支持复杂业务逻辑：函数调用、条件分支、多任务执行",
        "一键集成：以不同形态的入口集成到业务系统的各个角落"
      ]
    },
    {
      "name": "JitAuth",
      "type": "Memory",
      "observations": [
        "身份认证和权限管理组件，基于RBAC权限控制模型",
        "支持多种认证方式和组织架构管理"
      ]
    },
    {
      "name": "JitORM",
      "type": "Memory",
      "observations": [
        "对象关系映射框架，统一数据库访问和操作",
        "支持多种数据库和灵活的数据模型定义"
      ]
    },
    {
      "name": "JitWeb",
      "type": "Memory",
      "observations": [
        "Web前端开发组件，提供门户、页面、组件三级UI构建单元",
        "支持组件化布局和代码开发模式"
      ]
    },
    {
      "name": "JitService",
      "type": "Memory",
      "observations": [
        "业务逻辑封装组件，提供API接口和业务服务",
        "支持外部服务集成和事件驱动架构"
      ]
    },
    {
      "name": "JitWorkflow",
      "type": "Memory",
      "observations": [
        "工作流引擎，支持业务流程建模和审批管理",
        "提供流程实例控制和监控分析"
      ]
    },
    {
      "name": "JitTask",
      "type": "Memory",
      "observations": [
        "任务调度组件，支持定时任务和异步任务执行",
        "提供任务队列和分布式任务管理"
      ]
    },
    {
      "name": "JitStorage",
      "type": "Memory",
      "observations": [
        "存储管理组件，提供文件存储和对象存储服务",
        "支持缓存系统和文件模板引擎"
      ]
    },
    {
      "name": "JitMessage",
      "type": "Memory",
      "observations": [
        "消息通知组件，支持短信、邮件和推送等多种渠道",
        "提供统一的消息发送和管理服务"
      ]
    },
    {
      "name": "JitPay",
      "type": "Memory",
      "observations": [
        "支付集成组件，支持多种支付方式和渠道接入",
        "提供订单管理和交易处理能力"
      ]
    },
    {
      "name": "JitI18N",
      "type": "Memory",
      "observations": [
        "国际化组件，支持多语言翻译和本地化管理"
      ]
    },
    {
      "name": "JitCommons",
      "type": "Memory",
      "observations": [
        "通用工具库，提供常用的工具类和辅助函数"
      ]
    },
    {
      "name": "服务函数编辑器",
      "type": "Memory",
      "observations": [
        "Python类实现：服务实例元素基于Python类架构",
        "可视化管理：支持可视化方式管理和编写服务函数",
        "源码模式切换：复杂逻辑可切换到源码模式进行全代码开发"
      ]
    },
    {
      "name": "02-生态价值",
      "type": "Memory",
      "observations": [
        "技术架构在开发效率和生态协作两个方面的价值体现"
      ]
    },
    {
      "name": "表格编辑器",
      "type": "Memory",
      "observations": [
        "数据模型依赖：基于数据模型元素实现数据展示功能",
        "功能特性支持：支持冻结列、列点击、行内编辑、自定义单元格渲染、汇总统计、工具栏按钮、操作列按钮、业务规则等",
        "拖拽式开发：通过拖拽操作完成表格实例开发"
      ]
    },
    {
      "name": "图表编辑器",
      "type": "Memory",
      "observations": [
        "内置图表组件：提供条形图、折线图、饼状图等24种统计图形",
        "自定义样式支持：支持图表样式的自定义配置"
      ]
    },
    {
      "name": "Q表达式",
      "type": "Memory",
      "observations": [
        "Query Expression，构建面向数据模型的查询条件语法",
        "以简洁、直观的字符串方式表达复杂的查询逻辑",
        "支持比较操作符（=、!=、>、>=、<、<=）",
        "支持包含操作符（in、nin）、模糊匹配（like、startswith、endswith）、空值判断（isnull）等"
      ]
    },
    {
      "name": "01-快速入门",
      "type": "Memory",
      "observations": [
        "开发环境安装和配置指导",
        "创建第一个应用的完整流程体验",
        "通过示例项目快速理解框架基本概念"
      ]
    },
    {
      "name": "SQLite数据库",
      "type": "Memory",
      "observations": [
        "轻量级关系型数据库",
        "数据库类型标识：sqlite",
        "Type元素fullName：databases.SqliteType",
        "配置文件包含database路径设置"
      ]
    },
    {
      "name": "MySQL数据库",
      "type": "Memory",
      "observations": [
        "开源关系型数据库",
        "数据库类型标识：mysql",
        "Type元素fullName：databases.MySQLType",
        "配置文件包含host、port、user、password、database等连接信息"
      ]
    },
    {
      "name": "PostgreSQL数据库",
      "type": "Memory",
      "observations": [
        "高级开源关系型数据库",
        "Type元素fullName：databases.PgSqlType",
        "配置文件包含dbname、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "Oracle数据库",
      "type": "Memory",
      "observations": [
        "企业级商业关系型数据库",
        "Type元素fullName：databases.OracleType",
        "配置文件包含service_name、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "SQL Server数据库",
      "type": "Memory",
      "observations": [
        "微软企业级关系型数据库",
        "Type元素fullName：databases.SqlServerType",
        "配置文件包含database、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "达梦数据库",
      "type": "Memory",
      "observations": [
        "国产自主可控关系型数据库",
        "Type元素fullName：databases.DmdbType",
        "配置文件包含schema、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "基础字段类型",
      "type": "Memory",
      "observations": [
        "单行文本、多行文本、数字、金额、百分比等基础数据类型",
        "包含富文本、编号、流水号等特殊文本类型",
        "适用于大部分常规业务数据场景",
        "提供标准的输入验证和显示功能"
      ]
    },
    {
      "name": "选择器类型",
      "type": "Memory",
      "observations": [
        "选项组单选/多选、下拉选择、检查框等选择类型",
        "日期时间选择器",
        "支持多种选择交互方式",
        "适用于数据列表、状态选择等场景"
      ]
    },
    {
      "name": "附件类型",
      "type": "Memory",
      "observations": [
        "文件、图片、手写签名等附件类型",
        "支持文件上传、存储和下载功能",
        "适用于文档管理、图片展示、电子签名等场景"
      ]
    },
    {
      "name": "01-问题洞察",
      "type": "Memory",
      "observations": [
        "传统系统透明性缺失问题：系统内部结构和行为对外部智能体不可见，无法被动态理解和操作",
        "系统耦合性问题：静态依赖关系导致模块间紧密耦合，缺乏动态组合和灵活扩展能力",
        "技术复杂度处理困难：缺乏巨型模块封装方法，基础设施技术庞杂割裂，AI和开发者疲于应付巨大的技术复杂度，被迫构建大量\"小轮子\"而非基于\"大轮子\"开发",
        "开发工具能力受限：传统可视化开发工具灵活性不足，零代码/低代码平台表达能力受限，系统规模扩大时开发效率急剧下降",
        "架构设计能力不足：传统编程框架未深入覆盖业务领域，多数开发者缺乏设计高复用、易扩展系统架构的能力，随着系统复杂化导致维护效率持续下降",
        "AI应用复杂性问题：企业级AI应用具有业务深度、功能复杂、需要快速迭代的特点，传统开发模式难以应对",
        "开发模式困局：企业级应用个性化需求强烈，标准化产品无法满足，定制化开发成本高昂风险大。传统开发需要大量基础工作，零代码平台遇到复杂需求就卡壳，低代码平台深度定制能力不足，各种技术路径都有明显短板"
      ]
    },
    {
      "name": "特殊字段类型",
      "type": "Memory",
      "observations": [
        "地址、身份证号、车牌号、电话号码等业务特定类型",
        "定位、超链接、子表等复杂功能类型",
        "内置业务验证规则和专用显示组件",
        "适用于特定业务领域的数据处理"
      ]
    },
    {
      "name": "数据容器类型",
      "type": "Memory",
      "observations": [
        "字典、列表、映射、单行数据、多行数据等容器类型",
        "不可用于模型字段，主要用于业务逻辑处理",
        "支持复杂数据结构的存储和操作",
        "适用于数据转换、中间结果存储等场景"
      ]
    },
    {
      "name": "关联数据类型",
      "type": "Memory",
      "observations": [
        "关联数据、筛选条件等数据关联类型",
        "实现模型间的数据关联和引用",
        "支持外键关系和复杂查询条件",
        "适用于关联查询、数据联动等场景"
      ]
    },
    {
      "name": "普通数据模型",
      "type": "Memory",
      "observations": [
        "最常见的数据模型，每个实例对应指定数据库中的一张表",
        "对模型字段的变更会自动同步到数据库中",
        "开发人员无需手动维护数据库表",
        "支持所有类型的数据字段定义"
      ]
    },
    {
      "name": "聚合表模型",
      "type": "Memory",
      "observations": [
        "用于多数据模型关联的复杂数据分析场景",
        "支持分组汇总（GROUP BY）、追加合并（UNION）、横向连接（JOIN）",
        "三种模式可以嵌套组合使用",
        "适用于数据统计、报表生成等场景"
      ]
    },
    {
      "name": "扩展表模型",
      "type": "Memory",
      "observations": [
        "以一个普通数据模型作为基础模型",
        "通过字段关联规则链式地关联（LEFT JOIN）其他数据模型",
        "对被关联模型的字段进行聚合统计（SUM、COUNT、MAX等）",
        "适用于复杂业务查询和数据关联分析"
      ]
    },
    {
      "name": "数据对象模型",
      "type": "Memory",
      "observations": [
        "当前仅支持全代码方式使用",
        "可类比为DTO（Data Transfer Object）",
        "完全由开发者按需定义，不与数据库关联",
        "在业务逻辑流转中使用，适用于数据传输和中间处理"
      ]
    },
    {
      "name": "03-制造业通用模板",
      "type": "Memory",
      "observations": [
        "通用架构基础：ERP/MES完整架构，涵盖大屏看板、经营报表、数字化管理、精益化生产、业财一体化五大核心模块",
        "标准业务功能：HRM人力资源、OA办公、ERP进销存、MES生产四大业务板块，包含客户管理、销售计划、工厂建模、生产管理等基础功能模块",
        "可继承模板：为各制造业细分行业提供可继承的通用基础架构，支持零侵入式扩展和行业定制"
      ]
    },
    {
      "name": "01-背景",
      "type": "Memory",
      "observations": [
        "问题洞察：分析传统系统在AI时代面临的主要挑战",
        "目标：描绘面向AI时代的理想系统架构",
        "规律探索：探索软件技术发展的内在规律",
        "设计原则：确立技术实现应遵循的基本原则",
        "机制设计：建立技术体系的基础设计原理"
      ]
    },
    {
      "name": "前端App对象",
      "type": "Memory",
      "observations": [
        "前端平台API的核心，提供应用级别的属性和方法",
        "可通过this.app在元素内部访问，或getRuntimeApp全局访问",
        "包含appId、name、title等应用基本属性",
        "提供元素获取和操作的相关方法"
      ]
    },
    {
      "name": "审批流程编辑器",
      "type": "Memory",
      "observations": [
        "拖拽式设计：通过图形化画布构建审批流程",
        "企业级逻辑支持：内置规则引擎、动态分支、并行网关、子流程嵌套功能",
        "双模开发模式：标准化场景支持可视化配置，复杂场景支持API接入和代码级规则扩展",
        "实时生效机制：业务规则变更即时生效，自动留存审计轨迹"
      ]
    },
    {
      "name": "后端App对象",
      "type": "Memory",
      "observations": [
        "后端应用管理的核心对象，可直接使用app关键字调用",
        "包含appId、appKey、version、title等丰富的应用属性",
        "包含env、node、code、resource等关联对象",
        "支持初始化数据、环境变量、依赖管理等功能"
      ]
    },
    {
      "name": "AppCode源码管理器",
      "type": "Memory",
      "observations": [
        "应用源码管理器，用于管理和操作应用的源代码文件",
        "仅在应用具有本地源码时可用（即存在app.json文件）",
        "通常用于开发调试场景",
        "支持文件存在性检查、目录判断、文件读写等操作"
      ]
    },
    {
      "name": "AppResource资源管理器",
      "type": "Memory",
      "observations": [
        "应用资源管理器，用于管理和操作应用的已打包资源文件",
        "用于运行时环境，负责从内存中读取应用的打包资源",
        "包括元素资源、公共资源等",
        "支持资源存在性检查、资源读取等操作"
      ]
    },
    {
      "name": "Environ运行环境",
      "type": "Memory",
      "observations": [
        "运行环境对象，用于管理和控制应用的运行环境",
        "在同一个运行环境中，每个AppId只能运行一个版本",
        "包含envId、orgId、title、rootPath等环境属性",
        "支持应用获取、路径管理、部署规则等功能"
      ]
    },
    {
      "name": "Element元素对象",
      "type": "Memory",
      "observations": [
        "元素对象，通过app.getElement(fullName)获取",
        "包含envId、appId、version、define、fullName等元素属性",
        "支持元素文件读取和管理",
        "实现了对执行对象的透明代理，可直接调用执行对象的方法和属性"
      ]
    },
    {
      "name": "筛选器编辑器",
      "type": "Memory",
      "observations": [
        "组件协作模式：与数据展示类组件配合使用，触发筛选事件驱动数据查询",
        "模型筛选器：依赖数据模型，输出特定模型的查询条件",
        "通用筛选器：自由定义查询条件，提供查询条件转换方法适配任意模型"
      ]
    },
    {
      "name": "Node节点对象",
      "type": "Memory",
      "observations": [
        "Node对象对应着当前运行的Jit节点",
        "包含nodeId、startId、nodeType、port、bindIp等节点属性",
        "支持节点配置管理和版本信息",
        "所有属性均为只读属性"
      ]
    },
    {
      "name": "02-定义范式与方法",
      "type": "Memory",
      "observations": [
        "从传统的人机交互转向人智协同的开发和运行模式",
        "以编排式设计为核心的结构化开发方法论",
        "支持多种开发方式并存和协作的统一框架"
      ]
    },
    {
      "name": "05-机制设计",
      "type": "Memory",
      "observations": [
        "自描述机制：系统模块应具备描述自身结构、功能和接口的能力，使其可被外部系统理解",
        "动态加载：系统组件应支持运行时加载和卸载，实现系统的动态性和灵活性",
        "完全解耦：系统模块间应实现低耦合高内聚，支持独立开发、部署和维护",
        "统一机制：通过统一的模块管理机制实现自描述、动态加载和完全解耦的有机统一"
      ]
    },
    {
      "name": "03-能力表现",
      "type": "Memory",
      "observations": [
        "技术体系在开发效率、系统架构、应用实现等方面的核心能力表现",
        "覆盖从技术实现到业务应用的完整能力谱系"
      ]
    },
    {
      "name": "01-技术侧能力表现",
      "type": "Memory",
      "observations": [
        "模块复用：基于统一规范实现系统组件的高度复用和零侵入扩展",
        "解耦扩展：模块间低耦合高内聚，支持动态加载和灵活组合，易于集成易被集成",
        "软件和智件一体化：通过统一的技术架构实现软件系统与AI能力的全面深度融合，易用易开发",
        "代码精简：基于现代编程语言和巨型模块极限封装，降低技术复杂度实现极简开发，在保持完整表达能力前提下大幅提升开发效率",
        "全栈技术支撑：涵盖后端、前端、桌面端、移动端的完整技术栈，自动处理前后端交互调用关系和分布式网络协同",
        "开箱即用能力：框架层提供认证、事务、日志等企业级技术能力，应用层仅需声明业务定义，大幅降低开发量"
      ]
    },
    {
      "name": "01-开发范式",
      "type": "Memory",
      "observations": [
        "双模统一：图形化编排与代码编程的一体化开发体验",
        "人智协同：人类与AI智能体在开发和运行中的深度协作模式，AI和人通过UI共同协作，人通过UI操作干预AI",
        "编排式编程：以结构化定义为主、过程编程为辅的开发方法，框架层和应用层分别定义技术实现和业务逻辑"
      ]
    },
    {
      "name": "02-实现方法",
      "type": "Memory",
      "observations": [
        "零侵入复用：不修改原系统实现模块扩展和复用的技术手段",
        "解释执行：运行时解释执行实现修改即时生效的动态性",
        "多层复用机制：模板继承、组合构建、参数配置的分层复用方式"
      ]
    },
    {
      "name": "07-食品加工行业案例",
      "type": "Memory",
      "observations": [
        "模板继承：基于制造业通用模板，继承完整的ERP/MES基础架构和标准业务功能",
        "行业特点分析：高度定制化需求、复杂工艺流程控制、食品安全追溯要求、项目导向型管理模式",
        "扩展功能模块：在通用基础上扩展质量管理、质量追溯、限制运输、配方管理、制剂代号保密、合作商库存管理、有效期预警等",
        "食品安全体系：食品行业特有的全程安全控制和追溯系统"
      ]
    },
    {
      "name": "08-设备制造行业案例",
      "type": "Memory",
      "observations": [
        "模板继承：基于制造业通用模板，继承完整的ERP/MES基础架构和标准业务功能",
        "行业特点分析：高度定制化产品、复杂装配工艺、项目式生产管理、长周期交付控制",
        "扩展功能模块：在通用基础上扩展项目管理、工艺管理、装配进度跟踪、质量控制、供应商协同、成本核算等",
        "项目化管理：设备制造特有的项目中心化生产组织和资源协调体系"
      ]
    },
    {
      "name": "03-最佳实践",
      "type": "Memory",
      "observations": [
        "元素设计原则和代码质量保障方法",
        "继承复用策略和性能优化技巧",
        "异常处理和元素维护规范"
      ]
    },
    {
      "name": "01-理论层",
      "type": "Memory",
      "observations": [
        "技术体系的理论基础：包括根本理念、方法范式和能力特征三大理论体系",
        "从抽象理念到具体方法再到能力标准的完整理论链条，为整个技术体系提供指导"
      ]
    },
    {
      "name": "02-架构层",
      "type": "Memory",
      "observations": [
        "解决AI时代系统架构挑战，提供可扩展和智能化的架构解决方案",
        "体现技术架构在开发效率和生态协作方面的价值"
      ]
    },
    {
      "name": "数据模型编辑器",
      "type": "Memory",
      "observations": [
        "多种模型支持：内置基础模型、扩展表、聚合表多种数据模型类型",
        "对应编辑器：为各种数据模型提供专用的可视化编辑器"
      ]
    },
    {
      "name": "03-实现层",
      "type": "Memory",
      "observations": [
        "提供系统运行、开发和运维的工具平台",
        "提供完整的应用开发框架和组件体系"
      ]
    },
    {
      "name": "API编辑器",
      "type": "Memory",
      "observations": [
        "API授权管理：内置API授权元素，管理外部应用的API调用权限",
        "权限开放配置：通过勾选操作将应用API对外开放",
        "多语言SDK支持：提供Python、Nodejs、Java等多种语言的调用SDK"
      ]
    },
    {
      "name": "04-综合案例",
      "type": "Memory",
      "observations": [
        "分层递进的案例体系：从通用应用到行业解决方案的完整验证链条",
        "行业深度与技术广度并重：既展现技术架构的通用性，又体现行业适配的专业性",
        "集成完整的开发流程和项目管理经验"
      ]
    },
    {
      "name": "01-应用规范",
      "type": "Memory",
      "observations": [
        "应用目录结构和配置文件标准",
        "应用部署路径规则和元数据定义",
        "应用继承机制：子应用继承父应用的元素和配置，支持应用级大规模复用和个性化定制"
      ]
    },
    {
      "name": "01-数据库支持",
      "type": "Memory",
      "observations": [
        "支持多种主流数据库的统一数据访问层",
        "提供标准化的数据库连接和操作接口",
        "屏蔽不同数据库的实现差异"
      ]
    },
    {
      "name": "运行引擎",
      "type": "Memory",
      "observations": [
        "基于微内核架构和解释型执行模式的应用运行机制",
        "智能路由机制：运行环境路由→应用路由→元素路由的三级路由体系",
        "应用加载流程：URL解析→搜索应用文件夹→加载app.json→构建应用对象→缓存到容器",
        "元素加载机制：解析e.json→搜索type元素→调用load程序→构建实体对象→动态路由调用",
        "按需加载优化：懒加载策略、多层缓存机制，实现高性能运行"
      ]
    },
    {
      "name": "01-开发效率提升",
      "type": "Memory",
      "observations": [
        "代码精简：通过架构优化和分层设计大幅减少代码量",
        "系统复用：基于模块化和统一规范提高复用度",
        "双模开发：可视化编排与代码编程的统一开发体验",
        "效果验证：AI自动化+可视化开发实现降低技术复杂度、极简开发、门槛低效率高成本低"
      ]
    },
    {
      "name": "02-生态协作模式",
      "type": "Memory",
      "observations": [
        "基于JAAP协议的第三方应用发布和集成模式",
        "第三方可以无侵入方式扩展和定制应用功能",
        "支持开源/闭源、免费/付费等多种发布模式",
        "适用于开发工具、业务组件、行业解决方案等可复用模块"
      ]
    },
    {
      "name": "01-工具平台",
      "type": "Memory",
      "observations": [
        "包含应用运行平台、开发工具和运维工具",
        "支撑从开发到运维的完整生命周期"
      ]
    },
    {
      "name": "02-开发框架",
      "type": "Memory",
      "observations": [
        "所有组件遵循JAAP规范，支持统一调用、扩展、复用和多态特性",
        "技术框架层提供门户type元素、前端功能页type元素、组件type元素、数据模型type元素、数据库type元素等巨型技术组件，深度覆盖业务系统的常用功能模块",
        "基于矩阵型元架构实现通用系统模型，通过技术层type元素提供通用架构，业务应用无需架构设计",
        "实现业务与技术分离的架构设计，实例元素表达业务逻辑，type元素封装技术实现，零侵入式能力继承让业务应用自动获得全套技术能力",
        "元素级动态重置：业务层可任意重置框架中的技术实现元素，支持组件、接口、逻辑的热替换"
      ]
    },
    {
      "name": "04-应用层",
      "type": "Memory",
      "observations": [
        "提供从入门到进阶的完整学习路径",
        "包含开发指导、最佳实践和综合案例"
      ]
    },
    {
      "name": "04-设计原则",
      "type": "Memory",
      "observations": [
        "透明可控：系统应具备内在透明性，使智能体能够动态理解、感知和精确控制系统行为",
        "动态适配：系统组件可在运行时被动态组合和配置，实现系统行为的实时适配",
        "产业协同：通过标准化协议实现技术开发者与业务开发者的专业分工，形成\"底层通用技术+上层业务定制\"的产业协作模式",
        "开放封闭原则：通过零侵入的扩展机制实现功能增强和架构演化",
        "复用性原则：实现从大颗粒度到小颗粒度的多层次复用能力，提高开发效率和代码质量"
      ]
    },
    {
      "name": "02-架构原理",
      "type": "Memory",
      "observations": [
        "解决传统系统在AI时代面临的架构挑战和复杂性问题",
        "通过矩阵型元架构和JAAP协议实现系统的高度可扩展性和智能化"
      ]
    },
    {
      "name": "03-规律探索",
      "type": "Memory",
      "observations": [
        "表达能力约束：任何软件开发技术创新都不能以牺牲表达能力为代价。受限的DSL雾以处理复杂业务逻辑，因此无法成为主流技术发展方向",
        "技术演进与封装规律：从汇编语言到高级语言再到开发框架，封装层次递进提升。模块封装从函数、类级别向大颗粒度发展，始终遵循保持表达完整性、提升抽象层次、兼容前代生态的演进原则",
        "复杂度分离原理：业务复杂度无法被简化，而技术复杂度可以简化。技术创新应专注降低技术复杂度，同时保持业务表达的完整性",
        "技术发展现状：过去三十年软件开发技术缺乏质的飞跃，封装粒度和抽象层次提升缓慢，AI时代对巨型技术组件和深度业务框架的需求日益迫切",
        "表达能力约束：软件开发技术面临一个根本矛盾：要么简单易用但功能受限（如零代码），要么功能完整但使用复杂（如传统开发）。零代码平台虽然上手快，但遇到复杂业务就力不从心；传统开发什么都能做，但要花大量时间处理各种技术细节",
        "技术路径效率规律：不同开发技术在处理复杂项目时表现差异很大。零代码平台刚开始很快，越往后越慢，最后卡死；传统开发一开始就很慢，而且越来越慢；只有找到既快又能持续的技术路径才能解决根本问题"
      ]
    },
    {
      "name": "02-目标",
      "type": "Memory",
      "observations": [
        "解释型系统：构建具备自描述能力的系统，实现系统内部透明性，让智能体能够理解和操作，支撑完整技术栈的统一开发运维",
        "AI上下文工程：超越简单的提示词工程，通过系统整体架构为智能体提供丰富、动态的工作上下文",
        "软件和智件一体化：实现软件系统与智能体在架构层面的原生融合，构建企业级应用和AI智能体的统一平台",
        "编排式开发：以结构化定义为主、过程编程为辅的工业化开发范式，通过标准化组件和简化结构来降低复杂度",
        "大规模复用与定制：支持对标品的大规模复用和低成本定制，解决通用化与个性化需求的矛盾",
        "通用系统模型：构建深度覆盖业务系统的高集成度、高复用度、无限扩展的抽象系统模型，让大型系统保持优雅健壮",
        "突破技术路径限制：找到一条既有零代码平台初期效率，又有传统开发完整能力的技术路径，让开发者不用在'简单但受限'和'完整但复杂'之间做痛苦选择"
      ]
    },
    {
      "name": "02-数据类型",
      "type": "Memory",
      "observations": [
        "提供完整的数据类型定义和管理能力",
        "支持从基础到复杂的各种数据类型需求",
        "为数据建模提供丰富的类型选择"
      ]
    },
    {
      "name": "03-数据模型",
      "type": "Memory",
      "observations": [
        "提供完整的数据建模能力",
        "支持从简单到复杂的各种数据模型需求",
        "为业务系统提供灵活的数据架构支撑"
      ]
    },
    {
      "name": "02-开发指南",
      "type": "Memory",
      "observations": [
        "本地开发环境详细配置和调试技巧",
        "元素开发的基础知识和规范指导",
        "标准开发工作流程和问题解决方法"
      ]
    },
    {
      "name": "02-JAAP应用协议",
      "type": "Memory",
      "observations": [
        "Jit AI Application Protocol，解释型应用架构协议，定义应用开发和运行的标准规范",
        "跨平台统一标准：支持跨平台、跨语言、跨端的统一应用协议，实现AI动态感知、调用、编排",
        "集成能力支撑：天然支持API暴露及授权机制和外部API调用，实现多应用系统互联互通、集成与被集成，解决应用繁多组织繁多的复杂集成问题",
        "包含应用规范和元素规范两大核心模块"
      ]
    },
    {
      "name": "02-元素规范",
      "type": "Memory",
      "observations": [
        "Meta-Type-Instance三层元素架构设计",
        "统一的目录结构和文件命名规范",
        "元素生命周期管理机制和HTTP调用规范"
      ]
    },
    {
      "name": "04-数据操作",
      "type": "Memory",
      "observations": [
        "提供面向数据模型的完整数据操作能力",
        "包含查询条件构建和数据操作语言",
        "简化复杂数据操作的构建和执行",
        "为数据访问提供标准化的操作接口"
      ]
    },
    {
      "name": "TQL数据操作语言",
      "type": "Memory",
      "observations": [
        "Table Query Language，构建面向数据模型的数据操作语法",
        "查询条件使用Q表达式构建",
        "支持完整的数据查询：基本查询、关联查询、排序分页、聚合查询、联合查询",
        "支持完整的数据操作：插入（Insert）、更新（Update）、删除（Delete）",
        "提供统一的数据访问和操作标准"
      ]
    }
  ],
  "relations": [
    {
      "source": "02-开发工具",
      "target": "角色权限编辑器",
      "relationType": "包含"
    },
    {
      "source": "03-实现层",
      "target": "04-应用层",
      "relationType": "支撑"
    },
    {
      "source": "02-开发工具",
      "target": "服务函数编辑器",
      "relationType": "包含"
    },
    {
      "source": "03-能力表现",
      "target": "02-应用侧能力表现",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "审批流程编辑器",
      "relationType": "包含"
    },
    {
      "source": "01-背景",
      "target": "01-问题洞察",
      "relationType": "包含"
    },
    {
      "source": "03-实现层",
      "target": "02-开发框架",
      "relationType": "包含"
    },
    {
      "source": "01-背景",
      "target": "02-目标",
      "relationType": "包含"
    },
    {
      "source": "01-背景",
      "target": "03-规律探索",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "关联数据类型",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "API编辑器",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "门户编辑器",
      "relationType": "包含"
    },
    {
      "source": "前端App对象",
      "target": "前端元素对象",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "03-实现层",
      "relationType": "指导"
    },
    {
      "source": "Environ运行环境",
      "target": "AppResource资源管理器",
      "relationType": "包含"
    },
    {
      "source": "01-背景",
      "target": "04-设计原则",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AIAgent",
      "relationType": "包含"
    },
    {
      "source": "Environ运行环境",
      "target": "后端App对象",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "后台任务编辑器",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "后端事件编辑器",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "01-AI智能体应用",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "02-通用企业管理系统",
      "relationType": "包含"
    },
    {
      "source": "后端App对象",
      "target": "Element元素对象",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "04-数据操作",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "SQLite数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "MySQL数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "PostgreSQL数据库",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "数据容器类型",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "普通数据模型",
      "relationType": "包含"
    },
    {
      "source": "02-定义范式与方法",
      "target": "01-开发范式",
      "relationType": "包含"
    },
    {
      "source": "02-定义范式与方法",
      "target": "02-实现方法",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "02-定义范式与方法",
      "relationType": "包含"
    },
    {
      "source": "01-背景",
      "target": "05-机制设计",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "聚合表模型",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "03-制造业通用模板",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "03-能力表现",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI助理",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "Oracle数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "SQL Server数据库",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "扩展表模型",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "数据对象模型",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "04-汽车零配件行业案例",
      "relationType": "包含"
    },
    {
      "source": "02-架构原理",
      "target": "01-矩阵型元架构",
      "relationType": "包含"
    },
    {
      "source": "04-数据操作",
      "target": "Q表达式",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "页面编辑器",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "02-架构原理",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "02-架构层",
      "relationType": "指导"
    },
    {
      "source": "Environ运行环境",
      "target": "AppCode源码管理器",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "05-生物医药行业案例",
      "relationType": "包含"
    },
    {
      "source": "04-数据操作",
      "target": "TQL数据操作语言",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "01-应用运行平台",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "表单编辑器",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "06-电子制造行业案例",
      "relationType": "包含"
    },
    {
      "source": "04-综合案例",
      "target": "07-食品加工行业案例",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "达梦数据库",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "基础字段类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "选择器类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "附件类型",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "表格编辑器",
      "relationType": "包含"
    },
    {
      "source": "03-制造业通用模板",
      "target": "06-电子制造行业案例",
      "relationType": "继承"
    },
    {
      "source": "02-数据类型",
      "target": "特殊字段类型",
      "relationType": "包含"
    },
    {
      "source": "01-应用运行平台",
      "target": "运行时对象",
      "relationType": "包含"
    },
    {
      "source": "03-制造业通用模板",
      "target": "07-食品加工行业案例",
      "relationType": "继承"
    },
    {
      "source": "03-制造业通用模板",
      "target": "08-设备制造行业案例",
      "relationType": "继承"
    },
    {
      "source": "04-综合案例",
      "target": "08-设备制造行业案例",
      "relationType": "包含"
    },
    {
      "source": "03-能力表现",
      "target": "01-技术侧能力表现",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI知识库",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI大模型",
      "relationType": "包含"
    },
    {
      "source": "01-应用运行平台",
      "target": "运行引擎",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitAi",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitORM",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitAuth",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitWeb",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitService",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "图表编辑器",
      "relationType": "包含"
    },
    {
      "source": "03-制造业通用模板",
      "target": "04-汽车零配件行业案例",
      "relationType": "继承"
    },
    {
      "source": "02-开发工具",
      "target": "筛选器编辑器",
      "relationType": "包含"
    },
    {
      "source": "02-开发工具",
      "target": "数据模型编辑器",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitMessage",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitPay",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitStorage",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitTask",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitWorkflow",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitCommons",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitI18N",
      "relationType": "包含"
    },
    {
      "source": "02-架构原理",
      "target": "02-JAAP应用协议",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "01-数据库支持",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "02-数据类型",
      "relationType": "包含"
    },
    {
      "source": "02-JAAP应用协议",
      "target": "01-应用规范",
      "relationType": "包含"
    },
    {
      "source": "运行时对象",
      "target": "Node节点对象",
      "relationType": "包含"
    },
    {
      "source": "运行时对象",
      "target": "Environ运行环境",
      "relationType": "包含"
    },
    {
      "source": "Environ运行环境",
      "target": "前端App对象",
      "relationType": "包含"
    },
    {
      "source": "02-JAAP应用协议",
      "target": "02-元素规范",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "02-生态价值",
      "relationType": "包含"
    },
    {
      "source": "02-生态价值",
      "target": "01-开发效率提升",
      "relationType": "包含"
    },
    {
      "source": "02-生态价值",
      "target": "02-生态协作模式",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "01-快速入门",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "02-开发指南",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "03-最佳实践",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "04-综合案例",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "02-开发工具",
      "relationType": "包含"
    },
    {
      "source": "03-实现层",
      "target": "01-工具平台",
      "relationType": "包含"
    },
    {
      "source": "03-制造业通用模板",
      "target": "05-生物医药行业案例",
      "relationType": "继承"
    },
    {
      "source": "01-工具平台",
      "target": "03-运维工具",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "03-数据模型",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "01-背景",
      "relationType": "包含"
    }
  ]
}