{
  "entities": [
    {
      "name": "01-基础理念",
      "type": "Memory",
      "observations": [
        "解释型系统：系统具备自描述能力，可被外部智能体动态理解、感知和操控，实现系统的内在透明性",
        "AI上下文工程：超越提示词工程，通过系统整体架构和环境为智能体提供丰富、动态、可操作的上下文",
        "软智一体：软件系统与智能体在架构层面的原生融合，不是简单集成而是深度一体化设计",
        "动态编排：系统组件和模块可在运行时被动态组合、配置和调度，实现系统行为的实时适配",
        "编排式开发：以实体编排为主、过程编程为辅的开发范式，通过结构化设计简化过程复杂度",
        "解耦开放：系统各组件间实现高度解耦，同时保持对外的开放性和可扩展性，平衡封装与灵活性"
      ]
    },
    {
      "name": "分布式发布部署",
      "type": "Memory",
      "observations": [
        "支持平台和应用的完整生命周期管理",
        "实现自动按需加载和零配置部署",
        "支持多节点协同、负载均衡和热更新"
      ]
    },
    {
      "name": "02-开发工具",
      "type": "Memory",
      "observations": [
        "基于JAAP规范的企业级AI应用开发工具",
        "支持可视化编排和代码编程的双模式开发",
        "提供元素编辑器和代码自动生成能力",
        "支持门户、页面、服务、模型等模块化开发"
      ]
    },
    {
      "name": "03-运维工具",
      "type": "Memory",
      "observations": [
        "基于JAAP规范的自动化运维管理平台",
        "支持应用全生命周期管理：创建、发布、部署、运维",
        "提供自动化DevOps工具和分布式部署能力",
        "支持单节点和多节点集群部署"
      ]
    },
    {
      "name": "02-范式方法",
      "type": "Memory",
      "observations": [
        "从传统的人机交互转向人智协同的开发和运行模式",
        "以编排式设计为核心的结构化开发方法论",
        "支持多种开发方式并存和协作的统一框架"
      ]
    },
    {
      "name": "运行时对象",
      "type": "Memory",
      "observations": [
        "提供运行时的对象实例和管理机制",
        "为系统运行提供具体的对象实例和管理能力",
        "直接包含Node节点对象和Environ运行环境"
      ]
    },
    {
      "name": "前端元素对象",
      "type": "Memory",
      "observations": [
        "ElementDefine对象，描述元素的定义信息",
        "内容与元素e.json内容一致",
        "通过App对象的相关方法获取元素定义",
        "支持按类型、目录、实例等方式获取元素定义"
      ]
    },
    {
      "name": "03-能力特征",
      "type": "Memory",
      "observations": [
        "技术体系在开发效率、系统架构、应用实现等方面的核心能力表现",
        "覆盖从技术实现到业务应用的完整能力谱系"
      ]
    },
    {
      "name": "01-矩阵型元架构",
      "type": "Memory",
      "observations": [
        "横向元素族类：按技术领域划分（AI、Web、ORM等），实现族类内高度统一",
        "纵向元素分层：Meta-Type-Instance三层，实现层次化技术封装和业务定制",
        "矩阵交叉点：横纵交织形成强大的复用和扩展能力",
        "三层架构体系：微内核运行平台+开发框架层+业务应用层"
      ]
    },
    {
      "name": "01-应用运行平台",
      "type": "Memory",
      "observations": [
        "基于JAAP协议的解释型应用运行平台",
        "微内核架构设计，平台与应用完全分离",
        "支持跨平台运行和容器化应用管理",
        "实现应用全生命周期管理和分布式部署"
      ]
    },
    {
      "name": "JitAi",
      "type": "Memory",
      "observations": [
        "AI能力组件集，包含大模型、知识库、Agent和助理四个核心模块",
        "为企业级AI应用提供完整的智能化支撑"
      ]
    },
    {
      "name": "AI大模型",
      "type": "Memory",
      "observations": [
        "企业级大模型服务网关，对接各个大模型服务厂商",
        "提供统一的模型调用接口",
        "屏蔽不同大模型厂商的API差异",
        "提供统一的调用标准和错误处理机制",
        "支持业务层按需选择模型与参数",
        "支持负载均衡与故障转移"
      ]
    },
    {
      "name": "AI知识库",
      "type": "Memory",
      "observations": [
        "基于RAG技术的企业知识管理系统",
        "支持多种数据源的智能检索和知识增强",
        "支持文档、数据库、API等多种知识源",
        "实时更新：知识库内容动态同步，保证信息时效性",
        "基于向量数据库的智能语义匹配和检索",
        "应用场景：企业内部文档和制度的智能问答、产品手册和技术文档的自动检索、客户服务知识库的智能匹配、行业知识和最佳实践的智能推荐"
      ]
    },
    {
      "name": "AIAgent",
      "type": "Memory",
      "observations": [
        "AI应用的核心执行引擎",
        "负责工具编排、全链路状态跟踪和任务执行",
        "支持动态组合和调用各种业务工具和服务",
        "维护对话上下文、任务执行状态和数据流转状态",
        "复杂业务逻辑的分解和执行",
        "基于用户角色的工具访问权限管理"
      ]
    },
    {
      "name": "AI助理",
      "type": "Memory",
      "observations": [
        "AI应用与用户交互的统一界面",
        "支持可视化编排：通过可视化界面实现路由决策、AI Agent编排、人机交互设计",
        "实现多Agent协同：助理中可编排多个Agent，实现Multi Agent协作",
        "提供智能路由：根据用户意图自动选择合适的Agent处理任务",
        "支持复杂业务逻辑：函数调用、条件分支、多任务执行",
        "一键集成：以不同形态的入口集成到业务系统的各个角落"
      ]
    },
    {
      "name": "JitAuth",
      "type": "Memory",
      "observations": [
        "身份认证和权限管理组件，基于RBAC权限控制模型",
        "支持多种认证方式和组织架构管理"
      ]
    },
    {
      "name": "JitORM",
      "type": "Memory",
      "observations": [
        "对象关系映射框架，统一数据库访问和操作",
        "支持多种数据库和灵活的数据模型定义"
      ]
    },
    {
      "name": "JitWeb",
      "type": "Memory",
      "observations": [
        "Web前端开发组件，提供门户、页面、组件三级UI构建单元",
        "支持组件化布局和代码开发模式"
      ]
    },
    {
      "name": "JitService",
      "type": "Memory",
      "observations": [
        "业务逻辑封装组件，提供API接口和业务服务",
        "支持外部服务集成和事件驱动架构"
      ]
    },
    {
      "name": "JitWorkflow",
      "type": "Memory",
      "observations": [
        "工作流引擎，支持业务流程建模和审批管理",
        "提供流程实例控制和监控分析"
      ]
    },
    {
      "name": "JitTask",
      "type": "Memory",
      "observations": [
        "任务调度组件，支持定时任务和异步任务执行",
        "提供任务队列和分布式任务管理"
      ]
    },
    {
      "name": "JitStorage",
      "type": "Memory",
      "observations": [
        "存储管理组件，提供文件存储和对象存储服务",
        "支持缓存系统和文件模板引擎"
      ]
    },
    {
      "name": "JitMessage",
      "type": "Memory",
      "observations": [
        "消息通知组件，支持短信、邮件和推送等多种渠道",
        "提供统一的消息发送和管理服务"
      ]
    },
    {
      "name": "JitPay",
      "type": "Memory",
      "observations": [
        "支付集成组件，支持多种支付方式和渠道接入",
        "提供订单管理和交易处理能力"
      ]
    },
    {
      "name": "JitI18N",
      "type": "Memory",
      "observations": [
        "国际化组件，支持多语言翻译和本地化管理"
      ]
    },
    {
      "name": "JitCommons",
      "type": "Memory",
      "observations": [
        "通用工具库，提供常用的工具类和辅助函数"
      ]
    },
    {
      "name": "04-设计原理",
      "type": "Memory",
      "observations": [
        "自描述机制：系统模块应具备描述自身结构、功能和接口的能力，使其可被外部系统理解",
        "动态加载：系统组件应支持运行时加载和卸载，实现系统的动态性和灵活性",
        "完全解耦：系统模块间应实现低耦合高内聚，支持独立开发、部署和维护",
        "统一机制：通过统一的模块管理机制实现自描述、动态加载和完全解耦的有机统一"
      ]
    },
    {
      "name": "02-生态价值",
      "type": "Memory",
      "observations": [
        "技术架构在开发效率和生态协作两个方面的价值体现"
      ]
    },
    {
      "name": "Q表达式",
      "type": "Memory",
      "observations": [
        "Query Expression，构建面向数据模型的查询条件语法",
        "以简洁、直观的字符串方式表达复杂的查询逻辑",
        "支持比较操作符（=、!=、>、>=、<、<=）",
        "支持包含操作符（in、nin）、模糊匹配（like、startswith、endswith）、空值判断（isnull）等"
      ]
    },
    {
      "name": "01-快速入门",
      "type": "Memory",
      "observations": [
        "开发环境安装和配置指导",
        "创建第一个应用的完整流程体验",
        "通过示例项目快速理解框架基本概念"
      ]
    },
    {
      "name": "SQLite数据库",
      "type": "Memory",
      "observations": [
        "轻量级关系型数据库",
        "数据库类型标识：sqlite",
        "Type元素fullName：databases.SqliteType",
        "配置文件包含database路径设置"
      ]
    },
    {
      "name": "MySQL数据库",
      "type": "Memory",
      "observations": [
        "开源关系型数据库",
        "数据库类型标识：mysql",
        "Type元素fullName：databases.MySQLType",
        "配置文件包含host、port、user、password、database等连接信息"
      ]
    },
    {
      "name": "PostgreSQL数据库",
      "type": "Memory",
      "observations": [
        "高级开源关系型数据库",
        "Type元素fullName：databases.PgSqlType",
        "配置文件包含dbname、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "Oracle数据库",
      "type": "Memory",
      "observations": [
        "企业级商业关系型数据库",
        "Type元素fullName：databases.OracleType",
        "配置文件包含service_name、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "SQL Server数据库",
      "type": "Memory",
      "observations": [
        "微软企业级关系型数据库",
        "Type元素fullName：databases.SqlServerType",
        "配置文件包含database、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "达梦数据库",
      "type": "Memory",
      "observations": [
        "国产自主可控关系型数据库",
        "Type元素fullName：databases.DmdbType",
        "配置文件包含schema、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "基础字段类型",
      "type": "Memory",
      "observations": [
        "单行文本、多行文本、数字、金额、百分比等基础数据类型",
        "包含富文本、编号、流水号等特殊文本类型",
        "适用于大部分常规业务数据场景",
        "提供标准的输入验证和显示功能"
      ]
    },
    {
      "name": "选择器类型",
      "type": "Memory",
      "observations": [
        "选项组单选/多选、下拉选择、检查框等选择类型",
        "日期时间选择器",
        "支持多种选择交互方式",
        "适用于数据列表、状态选择等场景"
      ]
    },
    {
      "name": "附件类型",
      "type": "Memory",
      "observations": [
        "文件、图片、手写签名等附件类型",
        "支持文件上传、存储和下载功能",
        "适用于文档管理、图片展示、电子签名等场景"
      ]
    },
    {
      "name": "01-问题洞察",
      "type": "Memory",
      "observations": [
        "传统系统透明性缺失问题：系统内部结构和行为对外部智能体不可见，无法被动态理解和操作",
        "系统耦合性问题：静态依赖关系导致模块间紧密耦合，缺乏动态组合和灵活扩展能力",
        "AI应用复杂性问题：企业级AI应用具有业务深度、功能复杂、需要快速迭代的特点，传统开发模式难以应对"
      ]
    },
    {
      "name": "特殊字段类型",
      "type": "Memory",
      "observations": [
        "地址、身份证号、车牌号、电话号码等业务特定类型",
        "定位、超链接、子表等复杂功能类型",
        "内置业务验证规则和专用显示组件",
        "适用于特定业务领域的数据处理"
      ]
    },
    {
      "name": "数据容器类型",
      "type": "Memory",
      "observations": [
        "字典、列表、映射、单行数据、多行数据等容器类型",
        "不可用于模型字段，主要用于业务逻辑处理",
        "支持复杂数据结构的存储和操作",
        "适用于数据转换、中间结果存储等场景"
      ]
    },
    {
      "name": "关联数据类型",
      "type": "Memory",
      "observations": [
        "关联数据、筛选条件等数据关联类型",
        "实现模型间的数据关联和引用",
        "支持外键关系和复杂查询条件",
        "适用于关联查询、数据联动等场景"
      ]
    },
    {
      "name": "普通数据模型",
      "type": "Memory",
      "observations": [
        "最常见的数据模型，每个实例对应指定数据库中的一张表",
        "对模型字段的变更会自动同步到数据库中",
        "开发人员无需手动维护数据库表",
        "支持所有类型的数据字段定义"
      ]
    },
    {
      "name": "聚合表模型",
      "type": "Memory",
      "observations": [
        "用于多数据模型关联的复杂数据分析场景",
        "支持分组汇总（GROUP BY）、追加合并（UNION）、横向连接（JOIN）",
        "三种模式可以嵌套组合使用",
        "适用于数据统计、报表生成等场景"
      ]
    },
    {
      "name": "扩展表模型",
      "type": "Memory",
      "observations": [
        "以一个普通数据模型作为基础模型",
        "通过字段关联规则链式地关联（LEFT JOIN）其他数据模型",
        "对被关联模型的字段进行聚合统计（SUM、COUNT、MAX等）",
        "适用于复杂业务查询和数据关联分析"
      ]
    },
    {
      "name": "数据对象模型",
      "type": "Memory",
      "observations": [
        "当前仅支持全代码方式使用",
        "可类比为DTO（Data Transfer Object）",
        "完全由开发者按需定义，不与数据库关联",
        "在业务逻辑流转中使用，适用于数据传输和中间处理"
      ]
    },
    {
      "name": "前端App对象",
      "type": "Memory",
      "observations": [
        "前端平台API的核心，提供应用级别的属性和方法",
        "可通过this.app在元素内部访问，或getRuntimeApp全局访问",
        "包含appId、name、title等应用基本属性",
        "提供元素获取和操作的相关方法"
      ]
    },
    {
      "name": "后端App对象",
      "type": "Memory",
      "observations": [
        "后端应用管理的核心对象，可直接使用app关键字调用",
        "包含appId、appKey、version、title等丰富的应用属性",
        "包含env、node、code、resource等关联对象",
        "支持初始化数据、环境变量、依赖管理等功能"
      ]
    },
    {
      "name": "AppCode源码管理器",
      "type": "Memory",
      "observations": [
        "应用源码管理器，用于管理和操作应用的源代码文件",
        "仅在应用具有本地源码时可用（即存在app.json文件）",
        "通常用于开发调试场景",
        "支持文件存在性检查、目录判断、文件读写等操作"
      ]
    },
    {
      "name": "AppResource资源管理器",
      "type": "Memory",
      "observations": [
        "应用资源管理器，用于管理和操作应用的已打包资源文件",
        "用于运行时环境，负责从内存中读取应用的打包资源",
        "包括元素资源、公共资源等",
        "支持资源存在性检查、资源读取等操作"
      ]
    },
    {
      "name": "Environ运行环境",
      "type": "Memory",
      "observations": [
        "运行环境对象，用于管理和控制应用的运行环境",
        "在同一个运行环境中，每个AppId只能运行一个版本",
        "包含envId、orgId、title、rootPath等环境属性",
        "支持应用获取、路径管理、部署规则等功能"
      ]
    },
    {
      "name": "Element元素对象",
      "type": "Memory",
      "observations": [
        "元素对象，通过app.getElement(fullName)获取",
        "包含envId、appId、version、define、fullName等元素属性",
        "支持元素文件读取和管理",
        "实现了对执行对象的透明代理，可直接调用执行对象的方法和属性"
      ]
    },
    {
      "name": "Node节点对象",
      "type": "Memory",
      "observations": [
        "Node对象对应着当前运行的Jit节点",
        "包含nodeId、startId、nodeType、port、bindIp等节点属性",
        "支持节点配置管理和版本信息",
        "所有属性均为只读属性"
      ]
    },
    {
      "name": "01-开发范式",
      "type": "Memory",
      "observations": [
        "人智协同：人类与AI智能体在开发和运行中的深度协作模式",
        "编排式编程：以结构化定义为主、过程编程为辅的开发方法",
        "双模统一：图形化编排与代码编程的一体化开发体验",
        "AI-UI协作：智能自动化与人工干预的灵活协调机制"
      ]
    },
    {
      "name": "02-实现方法",
      "type": "Memory",
      "observations": [
        "零侵入复用：不修改原系统实现模块扩展和复用的技术手段",
        "解释执行：运行时解释执行实现修改即时生效的动态性",
        "多层复用机制：模板继承、组合构建、参数配置的分层复用方式"
      ]
    },
    {
      "name": "01-技术能力",
      "type": "Memory",
      "observations": [
        "代码精简：通过架构优化和分层封装大幅减少代码量和复杂度",
        "模块复用：基于统一规范实现系统组件的高度复用和零侵入扩展",
        "解耦扩展：模块间低耦合高内聚，支持动态加载和灵活组合",
        "智件融合：软件系统与AI智能体的原生一体化架构设计"
      ]
    },
    {
      "name": "02-应用能力",
      "type": "Memory",
      "observations": [
        "复杂度分级：按函数、代理、助理三级支持不同复杂度的AI应用开发",
        "人机协作：AI自动化处理与人工干预的灵活协调机制",
        "生产级标准：安全合规、稳定可控、权限精细化管理的企业级应用能力"
      ]
    },
    {
      "name": "03-最佳实践",
      "type": "Memory",
      "observations": [
        "元素设计原则和代码质量保障方法",
        "继承复用策略和性能优化技巧",
        "异常处理和元素维护规范"
      ]
    },
    {
      "name": "01-理论层",
      "type": "Memory",
      "observations": [
        "技术体系的理论基础：包括根本理念、方法范式和能力特征三大理论体系",
        "从抽象理念到具体方法再到能力标准的完整理论链条，为整个技术体系提供指导"
      ]
    },
    {
      "name": "02-架构层",
      "type": "Memory",
      "observations": [
        "解决AI时代系统架构挑战，提供可扩展和智能化的架构解决方案",
        "体现技术架构在开发效率和生态协作方面的价值"
      ]
    },
    {
      "name": "02-解决愿景",
      "type": "Memory",
      "observations": [
        "解释型系统：构建具备自描述能力的系统，实现系统内部透明性，让智能体能够理解和操作",
        "AI上下文工程：超越简单的提示词工程，通过系统整体架构为智能体提供丰富、动态的工作上下文",
        "软智一体：实现软件系统与智能体在架构层面的原生融合，而非简单的外部集成",
        "编排式开发：以结构化定义为主、过程编程为辅的开发范式，通过简化结构来降低复杂度"
      ]
    },
    {
      "name": "03-实现层",
      "type": "Memory",
      "observations": [
        "提供系统运行、开发和运维的工具平台",
        "提供完整的应用开发框架和组件体系"
      ]
    },
    {
      "name": "03-价值原则",
      "type": "Memory",
      "observations": [
        "透明可控：系统应具备内在透明性，使智能体能够动态理解、感知和精确控制系统行为",
        "解耦开放：系统组件间实现高度解耦，同时保持对外的开放性，平衡封装与灵活性",
        "动态适配：系统组件可在运行时被动态组合和配置，实现系统行为的实时适配",
        "零侵入：在不修改原有系统的前提下实现模块复用和系统扩展，解决通用性与定制化的矛盾"
      ]
    },
    {
      "name": "04-综合案例",
      "type": "Memory",
      "observations": [
        "从简单到复杂的案例递进体系",
        "包含智能客服、CRM系统等企业级应用实例",
        "集成完整的开发流程和项目管理经验"
      ]
    },
    {
      "name": "01-应用规范",
      "type": "Memory",
      "observations": [
        "应用目录结构和配置文件标准",
        "应用部署路径规则和元数据定义",
        "应用继承机制：子应用继承父应用的元素和配置"
      ]
    },
    {
      "name": "01-数据库支持",
      "type": "Memory",
      "observations": [
        "支持多种主流数据库的统一数据访问层",
        "提供标准化的数据库连接和操作接口",
        "屏蔽不同数据库的实现差异"
      ]
    },
    {
      "name": "运行引擎",
      "type": "Memory",
      "observations": [
        "基于微内核架构和解释型执行模式的应用运行机制",
        "智能路由机制：运行环境路由→应用路由→元素路由的三级路由体系",
        "应用实例化流程：应用资源自动热部署、应用目录校验、构建状态判断、应用实例化",
        "元素查找流程：运行时容器查询、应用配置查询、继承链追溯",
        "按需加载优化：懒加载策略、多层缓存机制，实现高性能运行"
      ]
    },
    {
      "name": "01-开发效率提升",
      "type": "Memory",
      "observations": [
        "代码精简：通过架构优化和分层设计大幅减少代码量",
        "系统复用：基于模块化和统一规范提高复用度",
        "双模开发：可视化编排与代码编程的统一开发体验",
        "低门槛开发：降低学习成本，提高开发效率"
      ]
    },
    {
      "name": "02-生态协作模式",
      "type": "Memory",
      "observations": [
        "基于JAAP协议的第三方应用发布和集成模式",
        "第三方可以无侵入方式扩展和定制应用功能",
        "支持开源/闭源、免费/付费等多种发布模式",
        "适用于开发工具、业务组件、行业解决方案等可复用模块"
      ]
    },
    {
      "name": "01-工具平台",
      "type": "Memory",
      "observations": [
        "包含应用运行平台、开发工具和运维工具",
        "支撑从开发到运维的完整生命周期"
      ]
    },
    {
      "name": "02-开发框架",
      "type": "Memory",
      "observations": [
        "基于矩阵型元架构的模块化开发框架",
        "提供12个核心业务组件，覆盖AI、数据、界面、认证等主要领域",
        "所有组件遵循JAAP规范，支持统一调用和扩展"
      ]
    },
    {
      "name": "04-应用层",
      "type": "Memory",
      "observations": [
        "提供从入门到进阶的完整学习路径",
        "包含开发指导、最佳实践和综合案例"
      ]
    },
    {
      "name": "02-架构原理",
      "type": "Memory",
      "observations": [
        "解决传统系统在AI时代面临的架构挑战和复杂性问题",
        "通过矩阵型元架构和JAAP协议实现系统的高度可扩展性和智能化"
      ]
    },
    {
      "name": "02-数据类型",
      "type": "Memory",
      "observations": [
        "提供完整的数据类型定义和管理能力",
        "支持从基础到复杂的各种数据类型需求",
        "为数据建模提供丰富的类型选择"
      ]
    },
    {
      "name": "03-数据模型",
      "type": "Memory",
      "observations": [
        "提供完整的数据建模能力",
        "支持从简单到复杂的各种数据模型需求",
        "为业务系统提供灵活的数据架构支撑"
      ]
    },
    {
      "name": "02-开发指南",
      "type": "Memory",
      "observations": [
        "本地开发环境详细配置和调试技巧",
        "元素开发的基础知识和规范指导",
        "标准开发工作流程和问题解决方法"
      ]
    },
    {
      "name": "02-JAAP应用协议",
      "type": "Memory",
      "observations": [
        "Jit AI Application Protocol，解释型应用架构协议",
        "定义应用开发和运行的标准规范，实现AI动态感知、调用、编排",
        "支持跨平台、跨语言、跨端的统一应用协议",
        "包含应用规范和元素规范两大模块"
      ]
    },
    {
      "name": "02-元素规范",
      "type": "Memory",
      "observations": [
        "Meta-Type-Instance三层元素架构设计",
        "统一的目录结构和文件命名规范",
        "元素生命周期管理机制和HTTP调用规范"
      ]
    },
    {
      "name": "04-数据操作",
      "type": "Memory",
      "observations": [
        "提供面向数据模型的完整数据操作能力",
        "包含查询条件构建和数据操作语言",
        "简化复杂数据操作的构建和执行",
        "为数据访问提供标准化的操作接口"
      ]
    },
    {
      "name": "TQL数据操作语言",
      "type": "Memory",
      "observations": [
        "Table Query Language，构建面向数据模型的数据操作语法",
        "查询条件使用Q表达式构建",
        "支持完整的数据查询：基本查询、关联查询、排序分页、聚合查询、联合查询",
        "支持完整的数据操作：插入（Insert）、更新（Update）、删除（Delete）",
        "提供统一的数据访问和操作标准"
      ]
    }
  ],
  "relations": [
    {
      "source": "03-实现层",
      "target": "04-应用层",
      "relationType": "支撑"
    },
    {
      "source": "03-实现层",
      "target": "02-开发框架",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "关联数据类型",
      "relationType": "包含"
    },
    {
      "source": "前端App对象",
      "target": "前端元素对象",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "03-实现层",
      "relationType": "指导"
    },
    {
      "source": "Environ运行环境",
      "target": "AppResource资源管理器",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AIAgent",
      "relationType": "包含"
    },
    {
      "source": "Environ运行环境",
      "target": "后端App对象",
      "relationType": "包含"
    },
    {
      "source": "后端App对象",
      "target": "Element元素对象",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "04-数据操作",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "SQLite数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "MySQL数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "PostgreSQL数据库",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "数据容器类型",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "普通数据模型",
      "relationType": "包含"
    },
    {
      "source": "02-范式方法",
      "target": "02-实现方法",
      "relationType": "包含"
    },
    {
      "source": "02-范式方法",
      "target": "01-开发范式",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "聚合表模型",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "02-范式方法",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "01-基础理念",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI助理",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "Oracle数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "SQL Server数据库",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "扩展表模型",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "数据对象模型",
      "relationType": "包含"
    },
    {
      "source": "02-架构原理",
      "target": "01-矩阵型元架构",
      "relationType": "包含"
    },
    {
      "source": "04-数据操作",
      "target": "Q表达式",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "02-架构原理",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "02-架构层",
      "relationType": "指导"
    },
    {
      "source": "Environ运行环境",
      "target": "AppCode源码管理器",
      "relationType": "包含"
    },
    {
      "source": "04-数据操作",
      "target": "TQL数据操作语言",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "01-应用运行平台",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "达梦数据库",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "基础字段类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "选择器类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "附件类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "特殊字段类型",
      "relationType": "包含"
    },
    {
      "source": "01-应用运行平台",
      "target": "运行时对象",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI知识库",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI大模型",
      "relationType": "包含"
    },
    {
      "source": "01-应用运行平台",
      "target": "运行引擎",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitAi",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitORM",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitAuth",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitWeb",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitService",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitMessage",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitPay",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitStorage",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitTask",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitWorkflow",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitCommons",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitI18N",
      "relationType": "包含"
    },
    {
      "source": "02-架构原理",
      "target": "02-JAAP应用协议",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "01-数据库支持",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "02-数据类型",
      "relationType": "包含"
    },
    {
      "source": "02-JAAP应用协议",
      "target": "01-应用规范",
      "relationType": "包含"
    },
    {
      "source": "运行时对象",
      "target": "Node节点对象",
      "relationType": "包含"
    },
    {
      "source": "运行时对象",
      "target": "Environ运行环境",
      "relationType": "包含"
    },
    {
      "source": "Environ运行环境",
      "target": "前端App对象",
      "relationType": "包含"
    },
    {
      "source": "02-JAAP应用协议",
      "target": "02-元素规范",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "02-生态价值",
      "relationType": "包含"
    },
    {
      "source": "02-生态价值",
      "target": "01-开发效率提升",
      "relationType": "包含"
    },
    {
      "source": "02-生态价值",
      "target": "02-生态协作模式",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "01-快速入门",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "02-开发指南",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "03-最佳实践",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "04-综合案例",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "03-能力特征",
      "relationType": "包含"
    },
    {
      "source": "03-能力特征",
      "target": "02-应用能力",
      "relationType": "包含"
    },
    {
      "source": "03-能力特征",
      "target": "01-技术能力",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "01-问题洞察",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "02-解决愿景",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "03-价值原则",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "04-设计原理",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "02-开发工具",
      "relationType": "包含"
    },
    {
      "source": "03-实现层",
      "target": "01-工具平台",
      "relationType": "包含"
    },
    {
      "source": "03-运维工具",
      "target": "分布式发布部署",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "03-运维工具",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "03-数据模型",
      "relationType": "包含"
    }
  ]
}