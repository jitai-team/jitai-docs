{
  "entities": [
    {
      "name": "01-基础理念",
      "type": "Memory",
      "observations": [
        "包含JitAi技术体系的根本哲学思想和价值观",
        "为整个技术体系提供哲学指导和价值方向",
        "体现技术创新的思想内核和精神追求",
        "涵盖技术愿景、价值主张、痛点洞察、设计原理四个维度"
      ]
    },
    {
      "name": "分布式发布部署",
      "type": "Memory",
      "observations": [
        "支持平台部署、平台更新、应用部署、应用更新的完整生命周期管理",
        "服务器端实现像浏览器端一样的自动按需加载最新应用机制",
        "开发者无需为私有化环境的部署更新而烦恼，实现零配置部署",
        "支持一键分布式部署，简化复杂环境下的应用分发",
        "分布式部署架构支持多节点协同和负载均衡",
        "实现应用的热更新和版本管理，确保业务连续性",
        "自动化的依赖管理和环境配置，降低运维复杂度"
      ]
    },
    {
      "name": "02-开发工具",
      "type": "Memory",
      "observations": [
        "符合JAAP规范的双模（可视化、全代码）统一的企业级AI应用开发工具",
        "由应用运行平台解释运行，提供编排式编程体验",
        "IDEApp是JitAi打造的编程与编排双模式的企业级应用开发工具",
        "支持可视化编排和编程的开发工具和开发方式，大幅提升开发效率",
        "自适应开发框架的扩展变更以及开发者自定义的元素族类",
        "使开发速度提升10倍，让开发者从容应对AI应用的复杂多变",
        "基于极简开发机制，提供可视化编排和编程双模一体的开发体验",
        "通过结构化设计简化过程复杂度，实现高效的应用系统开发"
      ]
    },
    {
      "name": "03-运维工具",
      "type": "Memory",
      "observations": [
        "符合JAAP规范的一站式自动化运维管理平台",
        "由应用运行平台解释运行",
        "支持应用的全生命周期管理：创建、发布、部署、运维",
        "提供自动化的DevOps工具，让AI应用的全流程简单化、轻量化",
        "大幅降低运维成本和复杂度"
      ]
    },
    {
      "name": "02-范式方法",
      "type": "Memory",
      "observations": [
        "包含通用设计原理和AI应用开发的方法论",
        "提供可操作的设计原则和开发范式指导",
        "连接抽象哲学与具体实践的方法桥梁",
        "涵盖开发范式和实现方法两个核心领域",
        "突破传统后端服务调用的局限，实现前后端统一的工具调用能力",
        "支持AI对全栈模块的统一调用，为企业级AI应用提供全面的工具集成能力",
        "元素天然面向AI&UI友好协同：可被AI感知操控，可被UI触发调用",
        "AI&UI灵活交互机制：AI智能化处理与用户人工处理紧密配合",
        "支持动态UI化呈现和可视化编排，简化复杂场景的应用开发",
        "基于元素机制实现多种复用策略的技术实现",
        "继承式复用：继承Type元素进行个性化改造，利用模板能力",
        "组合式复用：将多个元素组合实现复杂功能，灵活构建业务能力",
        "配置式复用：通过参数配置实现不同的行为模式，快速适配需求",
        "应用级继承式复用：通过元素机制实现应用级的继承式复用",
        "实现零依赖无侵入的复用和扩展，彻底解决通用标品和个性化定制的冲突"
      ]
    },
    {
      "name": "03-能力表现",
      "type": "Memory",
      "observations": [
        "体现理论在技术体系中的具体表现",
        "为应用开发提供具体的技术能力和工具集成",
        "连接技术实现与实际业务应用的能力桥梁",
        "涵盖技术能力和应用能力两个维度"
      ]
    },
    {
      "name": "01-技术愿景",
      "type": "Memory",
      "observations": [
        "JitAi = Jit + AI，Just In Time即时、快速构建，for AI application",
        "为AI而生的下一代应用开发技术体系，旨在加快企业级AI应用落地",
        "开启AI应用规模化时代，推动企业级AI应用的大规模普及",
        "构建从开发工具到运维平台的完整技术链路",
        "通过解释型系统、矩阵型元架构、图形化编排开发、自动化运维的有机结合建立完整技术体系"
      ]
    },
    {
      "name": "运行时对象",
      "type": "Memory",
      "observations": [
        "提供运行时的对象实例和管理机制",
        "为系统运行提供具体的对象实例和管理能力",
        "直接包含Node节点对象和Environ运行环境"
      ]
    },
    {
      "name": "前端元素对象",
      "type": "Memory",
      "observations": [
        "ElementDefine对象，描述元素的定义信息",
        "内容与元素e.json内容一致",
        "通过App对象的相关方法获取元素定义",
        "支持按类型、目录、实例等方式获取元素定义"
      ]
    },
    {
      "name": "01-矩阵型元架构",
      "type": "Memory",
      "observations": [
        "开创性的通用统一架构模式，突破传统架构局限",
        "横向元素族类：按技术领域划分（AI、Web、ORM等），实现族类内高度统一",
        "纵向元素分层：Meta-Type-Instance三层，实现层次化技术封装和业务定制",
        "矩阵交叉点：横纵交织形成强大的复用和扩展能力，达到无与伦比的灵活性",
        "通过元素三层架构和关注点分离，提供超越传统框架的架构能力"
      ]
    },
    {
      "name": "01-应用运行平台",
      "type": "Memory",
      "observations": [
        "微内核的JAAP应用解释与运行平台",
        "提供完整的应用运行环境和对象管理",
        "包含运行时系统和运行时对象两大核心模块",
        "支持跨平台运行：Windows、MacOS、Linux操作系统",
        "实现应用生命周期管理：开发、调试、构建、部署、运行、更新",
        "微内核架构设计，平台与应用完全分离",
        "内置在安装包中，随JitNode节点的启动而加载",
        "提供系统级API，开发者可搭配开发框架开发应用"
      ]
    },
    {
      "name": "JitAi",
      "type": "Memory",
      "observations": [
        "JitAi开发框架中的AI能力组件集合",
        "包含AI大模型、AI知识库、AIAgent、AI助理四个核心AI组件",
        "遵循JAAP规范设计，支持统一的AI组件调用标准",
        "为JitAi应用提供完整的AI能力支撑",
        "提供企业级AI应用开发的基础设施",
        "作为开发框架的子模块，专门负责AI功能的封装和实现"
      ]
    },
    {
      "name": "AI大模型",
      "type": "Memory",
      "observations": [
        "企业级大模型服务网关，对接各个大模型服务厂商",
        "提供统一的模型调用接口",
        "屏蔽不同大模型厂商的API差异",
        "提供统一的调用标准和错误处理机制",
        "支持业务层按需选择模型与参数",
        "支持负载均衡与故障转移"
      ]
    },
    {
      "name": "AI知识库",
      "type": "Memory",
      "observations": [
        "基于RAG技术的企业知识管理系统",
        "支持多种数据源的智能检索和知识增强",
        "支持文档、数据库、API等多种知识源",
        "实时更新：知识库内容动态同步，保证信息时效性",
        "基于向量数据库的智能语义匹配和检索",
        "应用场景：企业内部文档和制度的智能问答、产品手册和技术文档的自动检索、客户服务知识库的智能匹配、行业知识和最佳实践的智能推荐"
      ]
    },
    {
      "name": "AIAgent",
      "type": "Memory",
      "observations": [
        "AI应用的核心执行引擎",
        "负责工具编排、全链路状态跟踪和任务执行",
        "支持动态组合和调用各种业务工具和服务",
        "维护对话上下文、任务执行状态和数据流转状态",
        "复杂业务逻辑的分解和执行",
        "基于用户角色的工具访问权限管理"
      ]
    },
    {
      "name": "AI助理",
      "type": "Memory",
      "observations": [
        "AI应用与用户交互的统一界面",
        "支持可视化编排：通过可视化界面实现路由决策、AI Agent编排、人机交互设计",
        "实现多Agent协同：助理中可编排多个Agent，实现Multi Agent协作",
        "提供智能路由：根据用户意图自动选择合适的Agent处理任务",
        "支持复杂业务逻辑：函数调用、条件分支、多任务执行",
        "一键集成：以不同形态的入口集成到业务系统的各个角落"
      ]
    },
    {
      "name": "JitAuth",
      "type": "Memory",
      "observations": [
        "身份认证和权限管理组件",
        "基于RBAC（Role-Based Access Control）的权限控制体系",
        "支持多元化身份认证机制配置",
        "提供角色、组织架构、登录方式等权限管理元素"
      ]
    },
    {
      "name": "JitORM",
      "type": "Memory",
      "observations": [
        "对象关系映射框架",
        "以数据库元素、数据类型元素、模型元素为核心组成",
        "包含5大核心模块：数据库支持、数据类型系统、数据模型系统、Q表达式、TQL查询语言",
        "支持SQLite、MySQL、PostgreSQL、Oracle、SQL Server、达梦等多种数据库",
        "提供普通数据模型、聚合表模型、扩展表模型、数据对象模型四种模型",
        "自动管理数据库连接，内置业务层常用的数据操作接口",
        "提供Q表达式、TQL等辅助数据查询工具",
        "实现元素机制与传统框架的根本区别：自定义加载构造 vs 固定加载程序",
        "将替代Spring等传统框架，实现真正的面向AI&GUI的架构能力",
        "包含4大核心模块：数据库支持、数据类型、数据模型、数据操作"
      ]
    },
    {
      "name": "JitWeb",
      "type": "Memory",
      "observations": [
        "Web应用开发组件",
        "提供页面、组件、门户等UI构建单元",
        "支持组件化布局或代码开发实现特定业务功能",
        "门户：系统访问入口，应用默认提供使用区、开发区、管理区三类门户",
        "页面：功能模块界面，通过组件化布局或代码开发实现特定业务功能",
        "组件：可复用的UI构建单元，提供标准化的界面交互能力"
      ]
    },
    {
      "name": "JitService",
      "type": "Memory",
      "observations": [
        "业务逻辑处理组件",
        "封装核心业务规则和流程",
        "提供业务服务接口",
        "业务逻辑层的核心组件，实现业务规则的封装和复用"
      ]
    },
    {
      "name": "JitWorkflow",
      "type": "Memory",
      "observations": [
        "工作流程管理组件",
        "支持业务流程管理",
        "定义审批节点和流转规则",
        "业务流程管理，支持复杂的企业级审批流程"
      ]
    },
    {
      "name": "JitTask",
      "type": "Memory",
      "observations": [
        "任务调度组件",
        "支持定时任务和批处理任务的执行模板",
        "任务调度层的核心组件，管理定时任务和批处理任务"
      ]
    },
    {
      "name": "JitStorage",
      "type": "Memory",
      "observations": [
        "存储服务组件",
        "提供文件存储和管理能力",
        "基础设施层的存储服务，支持文件上传、下载、管理等功能"
      ]
    },
    {
      "name": "JitMessage",
      "type": "Memory",
      "observations": [
        "消息通信组件",
        "支持各种消息通信机制",
        "集成服务层的消息组件，支持邮件、短信、即时消息等通信方式"
      ]
    },
    {
      "name": "JitPay",
      "type": "Memory",
      "observations": [
        "支付组件",
        "提供支付集成能力",
        "集成服务层的支付组件，支持多种支付方式和支付渠道的集成"
      ]
    },
    {
      "name": "JitI18N",
      "type": "Memory",
      "observations": [
        "国际化组件",
        "支持多语言应用开发",
        "基础设施层的国际化支持，实现应用的多语言支持"
      ]
    },
    {
      "name": "JitCommons",
      "type": "Memory",
      "observations": [
        "通用工具组件",
        "提供常用的工具和库函数",
        "通用工具层，包含各种常用的工具类和库函数"
      ]
    },
    {
      "name": "02-生态价值",
      "type": "Memory",
      "observations": [
        "JitAi架构为开发者和企业用户带来的实际价值",
        "展现新架构模式的商业价值和生态效应",
        "促进技术生态的健康发展和协作共赢"
      ]
    },
    {
      "name": "02-价值主张",
      "type": "Memory",
      "observations": [
        "灵动特性：让应用系统成为可被AI动态感知、调用、编排的解释型系统",
        "轻快特性：解决'系统更复杂 vs 开发更高效'的相互冲突难题",
        "极大提高复用度和开发效率，是JitAi技术体系的根本优势所在",
        "在高封装度情况下实现完全开放，突破传统'封装度高则通用度差'的技术瓶颈",
        "创新性解决了传统技术架构中封装度与通用度的矛盾对立问题"
      ]
    },
    {
      "name": "03-痛点洞察",
      "type": "Memory",
      "observations": [
        "传统技术体系痛点：应用系统无法被AI动态感知，AI无法获取模块使用说明、无法动态决策和调用",
        "传统模块静态依赖造成的高耦合问题，解决组件的动态加载和解耦",
        "企业AI应用特点：比传统软件更纵深复杂、功能难以规划、需要边用边改、快速迭代",
        "传统封装度与通用度的矛盾对立：封装度高则通用度差的技术瓶颈"
      ]
    },
    {
      "name": "Q表达式",
      "type": "Memory",
      "observations": [
        "Query Expression，构建面向数据模型的查询条件语法",
        "以简洁、直观的字符串方式表达复杂的查询逻辑",
        "支持比较操作符（=、!=、>、>=、<、<=）",
        "支持包含操作符（in、nin）、模糊匹配（like、startswith、endswith）、空值判断（isnull）等"
      ]
    },
    {
      "name": "01-快速入门",
      "type": "Memory",
      "observations": [
        "5分钟开发AI应用（智能客服）的完整流程体验",
        "开发环境的快速配置：JitNode安装、IDE选择、基础环境验证",
        "第一个应用的创建和运行：从零开始创建、配置、部署的完整体验",
        "上手即用：无需理解复杂概念，直接通过操作步骤快速上手",
        "安装即用：JitNode一键安装，立即开始开发体验",
        "模板式开发：通过现成模板和指导步骤快速复制和修改",
        "可视化操作：通过画面点击配置，无需编写代码即可完成基本功能",
        "立即可见的效果：每个操作步骤都能立即看到结果，获得成就感",
        "为初次使用JitAi的用户提供零门槛、快速上手的实用指导"
      ]
    },
    {
      "name": "SQLite数据库",
      "type": "Memory",
      "observations": [
        "轻量级关系型数据库",
        "数据库类型标识：sqlite",
        "Type元素fullName：databases.SqliteType",
        "配置文件包含database路径设置"
      ]
    },
    {
      "name": "MySQL数据库",
      "type": "Memory",
      "observations": [
        "开源关系型数据库",
        "数据库类型标识：mysql",
        "Type元素fullName：databases.MySQLType",
        "配置文件包含host、port、user、password、database等连接信息"
      ]
    },
    {
      "name": "PostgreSQL数据库",
      "type": "Memory",
      "observations": [
        "高级开源关系型数据库",
        "Type元素fullName：databases.PgSqlType",
        "配置文件包含dbname、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "Oracle数据库",
      "type": "Memory",
      "observations": [
        "企业级商业关系型数据库",
        "Type元素fullName：databases.OracleType",
        "配置文件包含service_name、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "SQL Server数据库",
      "type": "Memory",
      "observations": [
        "微软企业级关系型数据库",
        "Type元素fullName：databases.SqlServerType",
        "配置文件包含database、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "达梦数据库",
      "type": "Memory",
      "observations": [
        "国产自主可控关系型数据库",
        "Type元素fullName：databases.DmdbType",
        "配置文件包含schema、host、port、user、password等连接信息"
      ]
    },
    {
      "name": "基础字段类型",
      "type": "Memory",
      "observations": [
        "单行文本、多行文本、数字、金额、百分比等基础数据类型",
        "包含富文本、编号、流水号等特殊文本类型",
        "适用于大部分常规业务数据场景",
        "提供标准的输入验证和显示功能"
      ]
    },
    {
      "name": "选择器类型",
      "type": "Memory",
      "observations": [
        "选项组单选/多选、下拉选择、检查框等选择类型",
        "日期时间选择器",
        "支持多种选择交互方式",
        "适用于数据列表、状态选择等场景"
      ]
    },
    {
      "name": "附件类型",
      "type": "Memory",
      "observations": [
        "文件、图片、手写签名等附件类型",
        "支持文件上传、存储和下载功能",
        "适用于文档管理、图片展示、电子签名等场景"
      ]
    },
    {
      "name": "特殊字段类型",
      "type": "Memory",
      "observations": [
        "地址、身份证号、车牌号、电话号码等业务特定类型",
        "定位、超链接、子表等复杂功能类型",
        "内置业务验证规则和专用显示组件",
        "适用于特定业务领域的数据处理"
      ]
    },
    {
      "name": "数据容器类型",
      "type": "Memory",
      "observations": [
        "字典、列表、映射、单行数据、多行数据等容器类型",
        "不可用于模型字段，主要用于业务逻辑处理",
        "支持复杂数据结构的存储和操作",
        "适用于数据转换、中间结果存储等场景"
      ]
    },
    {
      "name": "关联数据类型",
      "type": "Memory",
      "observations": [
        "关联数据、筛选条件等数据关联类型",
        "实现模型间的数据关联和引用",
        "支持外键关系和复杂查询条件",
        "适用于关联查询、数据联动等场景"
      ]
    },
    {
      "name": "普通数据模型",
      "type": "Memory",
      "observations": [
        "最常见的数据模型，每个实例对应指定数据库中的一张表",
        "对模型字段的变更会自动同步到数据库中",
        "开发人员无需手动维护数据库表",
        "支持所有类型的数据字段定义"
      ]
    },
    {
      "name": "聚合表模型",
      "type": "Memory",
      "observations": [
        "用于多数据模型关联的复杂数据分析场景",
        "支持分组汇总（GROUP BY）、追加合并（UNION）、横向连接（JOIN）",
        "三种模式可以嵌套组合使用",
        "适用于数据统计、报表生成等场景"
      ]
    },
    {
      "name": "扩展表模型",
      "type": "Memory",
      "observations": [
        "以一个普通数据模型作为基础模型",
        "通过字段关联规则链式地关联（LEFT JOIN）其他数据模型",
        "对被关联模型的字段进行聚合统计（SUM、COUNT、MAX等）",
        "适用于复杂业务查询和数据关联分析"
      ]
    },
    {
      "name": "数据对象模型",
      "type": "Memory",
      "observations": [
        "当前仅支持全代码方式使用",
        "可类比为DTO（Data Transfer Object）",
        "完全由开发者按需定义，不与数据库关联",
        "在业务逻辑流转中使用，适用于数据传输和中间处理"
      ]
    },
    {
      "name": "前端App对象",
      "type": "Memory",
      "observations": [
        "前端平台API的核心，提供应用级别的属性和方法",
        "可通过this.app在元素内部访问，或getRuntimeApp全局访问",
        "包含appId、name、title等应用基本属性",
        "提供元素获取和操作的相关方法"
      ]
    },
    {
      "name": "后端App对象",
      "type": "Memory",
      "observations": [
        "后端应用管理的核心对象，可直接使用app关键字调用",
        "包含appId、appKey、version、title等丰富的应用属性",
        "包含env、node、code、resource等关联对象",
        "支持初始化数据、环境变量、依赖管理等功能"
      ]
    },
    {
      "name": "AppCode源码管理器",
      "type": "Memory",
      "observations": [
        "应用源码管理器，用于管理和操作应用的源代码文件",
        "仅在应用具有本地源码时可用（即存在app.json文件）",
        "通常用于开发调试场景",
        "支持文件存在性检查、目录判断、文件读写等操作"
      ]
    },
    {
      "name": "AppResource资源管理器",
      "type": "Memory",
      "observations": [
        "应用资源管理器，用于管理和操作应用的已打包资源文件",
        "用于运行时环境，负责从内存中读取应用的打包资源",
        "包括元素资源、公共资源等",
        "支持资源存在性检查、资源读取等操作"
      ]
    },
    {
      "name": "Environ运行环境",
      "type": "Memory",
      "observations": [
        "运行环境对象，用于管理和控制应用的运行环境",
        "在同一个运行环境中，每个AppId只能运行一个版本",
        "包含envId、orgId、title、rootPath等环境属性",
        "支持应用获取、路径管理、部署规则等功能"
      ]
    },
    {
      "name": "Element元素对象",
      "type": "Memory",
      "observations": [
        "元素对象，通过app.getElement(fullName)获取",
        "包含envId、appId、version、define、fullName等元素属性",
        "支持元素文件读取和管理",
        "实现了对执行对象的透明代理，可直接调用执行对象的方法和属性"
      ]
    },
    {
      "name": "04-设计原理",
      "type": "Memory",
      "observations": [
        "架构设计是对复杂性的管理艺术，基于分治、抽象、组合三个基本原理",
        "封装与开放的辩证统一：既要高度封装提升复用性，又要完全开放保持扩展性",
        "分治原理：将复杂问题分解为独立的子问题",
        "抽象原理：隐藏细节，突出关键特征",
        "组合原理：通过复用对接基础抽象单元构建复杂功能"
      ]
    },
    {
      "name": "Node节点对象",
      "type": "Memory",
      "observations": [
        "Node对象对应着当前运行的Jit节点",
        "包含nodeId、startId、nodeType、port、bindIp等节点属性",
        "支持节点配置管理和版本信息",
        "所有属性均为只读属性"
      ]
    },
    {
      "name": "01-开发范式",
      "type": "Memory",
      "observations": [
        "AI应用开发范式的本质：AI+人协同完成目标",
        "从人机交互到人智协同的变革，从硬编码驱动到AI决策驱动的转变",
        "AI驱动的全栈工具调用流程，开发者不再仅仅开发操作界面和预设固定逻辑",
        "企业级AI应用涵盖管理与助理两大应用形态的完整特征体系",
        "管理系统：广泛涉及业务流程各专业环节，实现跨部门高效协同，迭代方向是互联互通一体化",
        "助理系统：深入特定专业环节，处理具体业务任务，辅助特定岗位人员，迭代目标是工具集成与系统深度融合"
      ]
    },
    {
      "name": "02-实现方法",
      "type": "Memory",
      "observations": [
        "提供可视化编排和全代码编程双模统一的开发模式，支持不同能力层次的开发者",
        "Vibe Coding：体验为王的编程开发范式，在最低学习成本情况下让普通用户快速上手并胜任大型企业级AI应用开发",
        "基于可视化编排、结构化设计和解释型执行的开发范式，实现从编排式开发到可视化开发的自然过渡",
        "通过双模统一设计，让不同背景和偏好的开发者都能高效工作，保持完全的开发自由度",
        "针对传统技术体系痛点提供具体解决方案：基于解释型系统、模块动态加载和解耦、零依赖无侵入的复用和扩展"
      ]
    },
    {
      "name": "01-技术能力",
      "type": "Memory",
      "observations": [
        "源代码复杂度和代码量仅为传统应用的5%，显著提升开发效率",
        "基于“技术模块层+业务定义层”分层模式最大化实现系统复用度和开放度",
        "应用级继承式复用，零依赖无侵入的复用和扩展，彻底解决通用标品和个性化定制的冲突",
        "基于“系统=结构+过程”的体系化认识，通过结构化设计简化过程复杂度",
        "所有模块基于元素规范构建，具备自描述、动态加载、完全解耦特性",
        "让应用系统成为可被AI动态感知的解释型系统，实现AI对应用系统的动态调用能力"
      ]
    },
    {
      "name": "02-应用能力",
      "type": "Memory",
      "observations": [
        "AI应用复杂度分层：从简单AI问答到替代人类工作岗位的AI员工助理，技术方案复杂度呈分层递进",
        "函数级别：AI函数的单一功能实现；代理级别：可编排agent，支持复杂任务处理；助理级别：AI和UI协同的可编排assistant",
        "生产级应用要求：企业级生产环境中安全合规、稳定可控是刚需，智能体、工具、数据模型的精细化权限控制确保安全合规",
        "AI-UI灵活交互机制支持AI智能化处理与用户人工处理紧密配合，满足生产级智能体稳定可控要求",
        "可视化编排能力支持迭代开发快速搭建，新创意需求快速落实获得反馈",
        "JitAi系统架构的通用性扩展性保障应用架构绝对稳定，规避推倒重来"
      ]
    },
    {
      "name": "03-最佳实践",
      "type": "Memory",
      "observations": [
        "元素设计原则：遵循单一职责原则，每个元素专注特定功能领域",
        "继承和复用策略：充分利用Type元素的模板能力，合理使用继承机制",
        "代码质量保障：合理配置加载时机、访问权限控制（private、protected、public修饰符的合理使用）",
        "错误处理和异常管理：实现健壮的异常处理机制，完善错误处理流程",
        "为有一定经验的开发者提升代码质量和开发效率的系统性指导",
        "性能优化系统策略：懒加载策略（应用级、元素级、资源级），元素缓存支持（线程级、进程级、不缓存）",
        "元素定义文件维护：及时更新e.json、config.json等元素定义文件，保持元素描述准确性"
      ]
    },
    {
      "name": "01-理论层",
      "type": "Memory",
      "observations": [
        "JitAi技术体系的理论基础和设计哲学层",
        "包含设计理念、价值主张、基础原理等抽象概念",
        "为整个技术体系提供思想指导和理论依据",
        "涵盖AI应用开发范式和企业级应用特征分析",
        "体现JitAi技术创新的核心思想和价值追求"
      ]
    },
    {
      "name": "02-架构层",
      "type": "Memory",
      "observations": [
        "JitAi技术体系的系统架构和技术机制层",
        "定义系统的总体设计和技术实现标准",
        "为具体实现提供架构指导和技术规范",
        "确保系统的可扩展性、可维护性和技术一致性",
        "包含架构原理和生态价值两大模块"
      ]
    },
    {
      "name": "03-实现层",
      "type": "Memory",
      "observations": [
        "JitAi技术体系的具体技术实现层",
        "包含平台工具、开发框架、功能组件等实现模块",
        "提供完整的技术实现和工具支撑",
        "为应用开发提供具体的技术能力和工具集",
        "实现理论和架构的具体落地和工程化",
        "包含工具平台和开发框架两大模块"
      ]
    },
    {
      "name": "04-综合案例",
      "type": "Memory",
      "observations": [
        "进阶案例：集成智能客服到钉钉机器人的完整实现过程",
        "复杂案例：AI驱动UI自动化交互的深度应用开发",
        "企业级案例：CRM应用的端到端开发，涵盖完整业务逻辑",
        "案例递进体系：从简单到复杂的实践学习路径",
        "项目管理和团队协作的实战经验分享",
        "为需要完整项目指导的开发者提供通过实战掌握复杂应用开发的综合案例"
      ]
    },
    {
      "name": "01-应用规范",
      "type": "Memory",
      "observations": [
        "定义应用的基本信息和运行参数，标准化的应用目录结构",
        "应用部署路径规则：运行环境目录/组织ID/应用ID/应用版本",
        "应用配置清单app.json，定义应用元数据和依赖关系",
        "应用继承机制：子应用可继承父应用的元素和配置，实现应用级复用"
      ]
    },
    {
      "name": "01-数据库支持",
      "type": "Memory",
      "observations": [
        "支持多种主流数据库的统一数据访问层",
        "提供标准化的数据库连接和操作接口",
        "屏蔽不同数据库的实现差异"
      ]
    },
    {
      "name": "运行引擎",
      "type": "Memory",
      "observations": [
        "基于微内核架构和解释型执行模式的应用运行机制",
        "智能路由机制：运行环境路由→应用路由→元素路由的三级路由体系",
        "应用实例化流程：应用资源自动热部署、应用目录校验、构建状态判断、应用实例化",
        "元素查找流程：运行时容器查询、应用配置查询、继承链追溯",
        "按需加载优化：懒加载策略、多层缓存机制，实现高性能运行"
      ]
    },
    {
      "name": "01-开发效率提升",
      "type": "Memory",
      "observations": [
        "源代码复杂度和代码量仅为传统应用的5%，显著提升开发效率",
        "基于“技术模块层+业务定义层”分层模式最大化实现系统复用度和开放度",
        "业务层高度可编排，复杂度和工程量降低90%以上",
        "开发速度提升10倍：可视化编排+编程双模统一的开发体验",
        "体验为王的编程开发范式：最低学习成本下让普通用户快速上手企业级AI应用开发"
      ]
    },
    {
      "name": "02-生态协作模式",
      "type": "Memory",
      "observations": [
        "基于JitAi应用协议的创新生态发布模式，突破传统软件工具发布方式的局限",
        "第三方可无侵入修改某一部分特性、轻量级、跨平台运行",
        "灵活发布模式：可开源可闭源、可免费可收费的多样化发布模式",
        "应用场景：开发工具、业务组件、行业解决方案等各类可复用模块",
        "形成丰富的第三方应用生态，降低开发成本，提高开发效率",
        "生态价值：通过无侵入定制和轻量级扩展，实现生态协作共赢"
      ]
    },
    {
      "name": "01-工具平台",
      "type": "Memory",
      "observations": [
        "提供系统运行和开发的工具平台支撑",
        "包含应用运行平台、开发工具和运维工具",
        "为开发者和运维人员提供完整的工具链",
        "确保系统的稳定运行和高效开发运维"
      ]
    },
    {
      "name": "02-开发框架",
      "type": "Memory",
      "observations": [
        "提供完整的应用开发框架和组件体系",
        "包含核心机制和业务组件两大模块",
        "为应用开发提供从基础到业务的全方位支撑",
        "提供完整的业务开发组件库",
        "包含AI能力、数据处理、认证授权、界面构建等13个核心业务组件",
        "所有组件均遵循JAAP规范，开箱即用",
        "支持开发者扩展和自定义业务组件",
        "实现高集成度且高开放度的模块化开发"
      ]
    },
    {
      "name": "04-应用层",
      "type": "Memory",
      "observations": [
        "JitAi技术体系的实践指导和应用层",
        "包含开发实践、学习路径、应用案例等实用内容",
        "为开发者提供具体的使用指导和最佳实践",
        "通过案例和教程帮助开发者掌握技术体系",
        "连接技术实现与实际业务应用的桥梁"
      ]
    },
    {
      "name": "02-架构原理",
      "type": "Memory",
      "observations": [
        "为技术实现提供理论指导和设计依据",
        "分析传统技术体系痛点和AI时代新需求",
        "通过解释型系统、矩阵型元架构、封闭开放设计哲学突破传统架构局限",
        "传统框架封装度与通用度的根本矛盾：高封装导致通用性差，低封装影响复用效率",
        "AI时代应用开发新需求：系统需可被AI动态感知、调用、编排，实现人机协同",
        "企业级应用复杂性管理：业务逻辑复杂、技术栈多样、团队协作困雾",
        "封装开放设计哲学：通过辩证统一实现高度封装提升复用性，完全开放保持扩展性",
        "解释型系统架构：让应用系统成为可被AI动态理解、调用、编排的解释型系统",
        "矩阵型组织方式：横向元素族类与纵向元素分层的矩阵结构，突破传统架构局限"
      ]
    },
    {
      "name": "02-数据类型",
      "type": "Memory",
      "observations": [
        "提供完整的数据类型定义和管理能力",
        "支持从基础到复杂的各种数据类型需求",
        "为数据建模提供丰富的类型选择"
      ]
    },
    {
      "name": "03-数据模型",
      "type": "Memory",
      "observations": [
        "提供完整的数据建模能力",
        "支持从简单到复杂的各种数据模型需求",
        "为业务系统提供灵活的数据架构支撑"
      ]
    },
    {
      "name": "02-开发指南",
      "type": "Memory",
      "observations": [
        "本地开发环境详细配置：Visual Studio Code轻量级编辑器配置、PyCharm专业IDE配置",
        "调试环境设置和调试技巧：创建调试配置文件、配置系统解释器、使用JitNode内置Python环境调试",
        "元素开发的基础知识：元素目录结构、文件命名规范、配置文件编写",
        "开发工作流程：需求分析→元素设计→创建元素目录→实现元素逻辑的标准流程",
        "常见开发问题的诊断和解决方法",
        "为开始实际开发的用户提供具体的开发方法和工具使用指导"
      ]
    },
    {
      "name": "02-JAAP应用协议",
      "type": "Memory",
      "observations": [
        "Jit AI Application Protocol，解释型应用架构协议",
        "JitAi技术体系的核心协议和运行机制，定义应用开发和运行的标准规范",
        "让应用系统成为可被AI动态感知、调用、编排的解释型系统",
        "把传统应用生态带入AI驱动和AI编排时代，实现系统的可扩展性和互操作性",
        "应用运行平台对其进行解释执行，实现跨平台运行"
      ]
    },
    {
      "name": "02-元素规范",
      "type": "Memory",
      "observations": [
        "采用三层元素架构设计，实现高度的可扩展性和复用性",
        "统一的目录结构和文件命名规范：e.json、config.json、loader.py、lifecycle.py",
        "Meta元素：type字段为空，直接由平台内核加载，作为元素族类的根节点",
        "Type元素：封装技术领域的完整基础设施，提供可继承的技术模板",
        "Instance元素：仅包含业务相关配置和轻量逻辑，专注业务差异化实现",
        "元素支持完整的生命周期管理机制和HTTP协议直接调用"
      ]
    },
    {
      "name": "04-数据操作",
      "type": "Memory",
      "observations": [
        "提供面向数据模型的完整数据操作能力",
        "包含查询条件构建和数据操作语言",
        "简化复杂数据操作的构建和执行",
        "为数据访问提供标准化的操作接口"
      ]
    },
    {
      "name": "TQL数据操作语言",
      "type": "Memory",
      "observations": [
        "Table Query Language，构建面向数据模型的数据操作语法",
        "查询条件使用Q表达式构建",
        "支持完整的数据查询：基本查询、关联查询、排序分页、聚合查询、联合查询",
        "支持完整的数据操作：插入（Insert）、更新（Update）、删除（Delete）",
        "提供统一的数据访问和操作标准"
      ]
    }
  ],
  "relations": [
    {
      "source": "03-实现层",
      "target": "04-应用层",
      "relationType": "支撑"
    },
    {
      "source": "03-实现层",
      "target": "02-开发框架",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "关联数据类型",
      "relationType": "包含"
    },
    {
      "source": "前端App对象",
      "target": "前端元素对象",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "03-实现层",
      "relationType": "指导"
    },
    {
      "source": "Environ运行环境",
      "target": "AppResource资源管理器",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AIAgent",
      "relationType": "包含"
    },
    {
      "source": "Environ运行环境",
      "target": "后端App对象",
      "relationType": "包含"
    },
    {
      "source": "后端App对象",
      "target": "Element元素对象",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "04-数据操作",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "SQLite数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "MySQL数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "PostgreSQL数据库",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "数据容器类型",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "普通数据模型",
      "relationType": "包含"
    },
    {
      "source": "02-范式方法",
      "target": "02-实现方法",
      "relationType": "包含"
    },
    {
      "source": "02-范式方法",
      "target": "01-开发范式",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "04-设计原理",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "聚合表模型",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "03-痛点洞察",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "02-价值主张",
      "relationType": "包含"
    },
    {
      "source": "01-基础理念",
      "target": "01-技术愿景",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "02-范式方法",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "01-基础理念",
      "relationType": "包含"
    },
    {
      "source": "03-能力表现",
      "target": "02-应用能力",
      "relationType": "包含"
    },
    {
      "source": "03-能力表现",
      "target": "01-技术能力",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI助理",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "Oracle数据库",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "SQL Server数据库",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "扩展表模型",
      "relationType": "包含"
    },
    {
      "source": "03-数据模型",
      "target": "数据对象模型",
      "relationType": "包含"
    },
    {
      "source": "02-架构原理",
      "target": "01-矩阵型元架构",
      "relationType": "包含"
    },
    {
      "source": "04-数据操作",
      "target": "Q表达式",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "02-架构原理",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "03-能力表现",
      "relationType": "包含"
    },
    {
      "source": "01-理论层",
      "target": "02-架构层",
      "relationType": "指导"
    },
    {
      "source": "Environ运行环境",
      "target": "AppCode源码管理器",
      "relationType": "包含"
    },
    {
      "source": "04-数据操作",
      "target": "TQL数据操作语言",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "01-应用运行平台",
      "relationType": "包含"
    },
    {
      "source": "01-数据库支持",
      "target": "达梦数据库",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "基础字段类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "选择器类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "附件类型",
      "relationType": "包含"
    },
    {
      "source": "02-数据类型",
      "target": "特殊字段类型",
      "relationType": "包含"
    },
    {
      "source": "01-应用运行平台",
      "target": "运行时对象",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI知识库",
      "relationType": "包含"
    },
    {
      "source": "JitAi",
      "target": "AI大模型",
      "relationType": "包含"
    },
    {
      "source": "01-应用运行平台",
      "target": "运行引擎",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitAi",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitORM",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitAuth",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitWeb",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitService",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitMessage",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitPay",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitStorage",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitTask",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitWorkflow",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitCommons",
      "relationType": "包含"
    },
    {
      "source": "02-开发框架",
      "target": "JitI18N",
      "relationType": "包含"
    },
    {
      "source": "02-架构原理",
      "target": "02-JAAP应用协议",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "01-数据库支持",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "02-数据类型",
      "relationType": "包含"
    },
    {
      "source": "02-JAAP应用协议",
      "target": "01-应用规范",
      "relationType": "包含"
    },
    {
      "source": "运行时对象",
      "target": "Node节点对象",
      "relationType": "包含"
    },
    {
      "source": "运行时对象",
      "target": "Environ运行环境",
      "relationType": "包含"
    },
    {
      "source": "Environ运行环境",
      "target": "前端App对象",
      "relationType": "包含"
    },
    {
      "source": "02-JAAP应用协议",
      "target": "02-元素规范",
      "relationType": "包含"
    },
    {
      "source": "02-架构层",
      "target": "02-生态价值",
      "relationType": "包含"
    },
    {
      "source": "02-生态价值",
      "target": "01-开发效率提升",
      "relationType": "包含"
    },
    {
      "source": "02-生态价值",
      "target": "02-生态协作模式",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "01-快速入门",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "02-开发指南",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "03-最佳实践",
      "relationType": "包含"
    },
    {
      "source": "04-应用层",
      "target": "04-综合案例",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "02-开发工具",
      "relationType": "包含"
    },
    {
      "source": "03-实现层",
      "target": "01-工具平台",
      "relationType": "包含"
    },
    {
      "source": "03-运维工具",
      "target": "分布式发布部署",
      "relationType": "包含"
    },
    {
      "source": "01-工具平台",
      "target": "03-运维工具",
      "relationType": "包含"
    },
    {
      "source": "JitORM",
      "target": "03-数据模型",
      "relationType": "包含"
    }
  ]
}